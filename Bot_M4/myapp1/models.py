from django.db import models
STATUSES = (('0', 'üü¢ –ê–∫—Ç–∏–≤–Ω—ã–π'), ('1', '–ê—Ä—Ö–∏–≤'), ('2', 'üî¥ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π'))

USER_TYPE = (('superadmin', '–°—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'),
             ('admin', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'))


class User(models.Model):
    id = models.IntegerField(primary_key=True, verbose_name='ID –∑–∞–ø–∏—Å–∏')
    tel_id = models.BigIntegerField(unique=True, verbose_name='Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    name = models.CharField(max_length=255, verbose_name='–ò–º—è')
    email = models.EmailField(unique=True, verbose_name='Email')
    context = models.TextField(blank=False, verbose_name='–ö–æ–Ω—Ç–µ–∫—Å—Ç')
    is_blocked = models.BooleanField(default=False, choices=STATUSES, verbose_name='–°—Ç–∞—Ç—É—Å')
    is_admin = models.BooleanField(default=False, choices=USER_TYPE, verbose_name='–¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    create_date = models.DateTimeField(auto_now_add=True, verbose_name='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è')
    module_start_date = models.DateTimeField(null=True, blank=True, verbose_name='–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –º–æ–¥—É–ª—è')
    current_lesson = models.IntegerField(default=1, verbose_name='–ù–æ–º–µ—Ä —É—Ä–æ–∫–∞')
    last_date = models.DateTimeField(auto_now=True, verbose_name='–ü—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—Ä–æ–∫–∞')

    class Meta:
        verbose_name = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'
        verbose_name_plural = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'
        db_table = 'users'
        managed = False


class Archive(models.Model):
    id = models.IntegerField(primary_key=True, verbose_name='ID –∑–∞–ø–∏—Å–∏')
    tel_id = models.ForeignKey(User, on_delete=models.CASCADE, verbose_name='Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    name = models.ForeignKey(User, on_delete=models.CASCADE, max_length=255, verbose_name='–ò–º—è')
    email = models.ForeignKey(User, on_delete=models.CASCADE, unique=True, verbose_name='–ï–º–µ–∏–ª')
    context = models.ForeignKey(User, on_delete=models.CASCADE, blank=False, verbose_name='–ö–æ–Ω—Ç–µ–∫—Å—Ç')
    is_blocked = models.ForeignKey(User, on_delete=models.CASCADE, default=False, choices=STATUSES,
                                   verbose_name='–°—Ç–∞—Ç—É—Å')
    is_admin = models.ForeignKey(User, on_delete=models.CASCADE, default=False, choices=USER_TYPE,
                                 verbose_name='–¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    create_date = models.ForeignKey(User, on_delete=models.CASCADE, auto_now_add=True, verbose_name='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è')
    last_date = models.CharField(auto_now=True, verbose_name='–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∞—Ä—Ö–∏–≤')

    class Meta:
        verbose_name = '–ê—Ä—Ö–∏–≤'
        verbose_name_plural = '–ê—Ä—Ö–∏–≤'
        db_table = 'archive'
        managed = False


class Deleted(models.Model):
    id = models.IntegerField(primary_key=True, verbose_name='ID –∑–∞–ø–∏—Å–∏')
    tel_id = models.ForeignKey(User, on_delete=models.CASCADE, verbose_name='Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    name = models.ForeignKey(User, on_delete=models.CASCADE, max_length=255, verbose_name='–ò–º—è')
    email = models.ForeignKey(User, on_delete=models.CASCADE, unique=True, verbose_name='–ï–º–µ–∏–ª')
    context = models.ForeignKey(User, on_delete=models.CASCADE, blank=False, verbose_name='–ö–æ–Ω—Ç–µ–∫—Å—Ç')
    is_blocked = models.ForeignKey(User, on_delete=models.CASCADE, default=False, choices=STATUSES,
                                   verbose_name='–°—Ç–∞—Ç—É—Å')
    is_admin = models.ForeignKey(User, on_delete=models.CASCADE, default=False, choices=USER_TYPE,
                                 verbose_name='–¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    create_date = models.ForeignKey(User, on_delete=models.CASCADE, auto_now_add=True, verbose_name='–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è')
    last_date = models.CharField(auto_now=True, verbose_name='–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ')

    class Meta:
        verbose_name = '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ'
        verbose_name_plural = '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ'
        db_table = 'deleted'
        managed = False


class Module(models.Model):
    id = models.IntegerField(primary_key=True, blank=False, verbose_name='ID –∑–∞–ø–∏—Å–∏')
    module_id = models.IntegerField(blank=False, verbose_name='–ù–æ–º–µ—Ä –º–æ–¥—É–ª—è')
    title = models.CharField(max_length=100, blank=False, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è')

    class Meta:
        verbose_name = '–ú–æ–¥—É–ª–∏'
        verbose_name_plural = '–ú–æ–¥—É–ª–∏'
        db_table = 'module'
        managed = False


class Lessons(models.Model):
    id = models.IntegerField(primary_key=True, blank=False, verbose_name='ID –∑–∞–ø–∏—Å–∏')
    lesson_id = models.IntegerField(blank=False, verbose_name='–ù–æ–º–µ—Ä —É—Ä–æ–∫–∞')
    module_id = models.ForeignKey(Module, on_delete=models.CASCADE, blank=False, verbose_name='–ù–æ–º–µ—Ä –º–æ–¥—É–ª—è')
    title = models.CharField(max_length=100, blank=False, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞')
    video = models.CharField(max_length=1000, blank=False, verbose_name='–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ')
    test_link = models.CharField(max_length=1000, blank=False, verbose_name='–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ—Å—Ç')
    pass_score = models.IntegerField(blank=False, verbose_name='–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∑–∞ —Ç–µ—Å—Ç')

    class Meta:
        verbose_name = '–£—Ä–æ–∫–∏'
        verbose_name_plural = '–£—Ä–æ–∫–∏'
        db_table = 'lessons'
        managed = False


class UserProgress(models.Model):
    id = models.IntegerField(primary_key=True, blank=False, verbose_name='ID –∑–∞–ø–∏—Å–∏')
    tel_id = models.ForeignKey(User, on_delete=models.CASCADE, verbose_name='Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    name = models.ForeignKey(User, on_delete=models.CASCADE, max_length=255, verbose_name='–ò–º—è')
    email = models.ForeignKey(User, on_delete=models.CASCADE, verbose_name='–ï–º–µ–∏–ª')
    module_id = models.ForeignKey(Module, on_delete=models.CASCADE, blank=False, verbose_name='–ù–æ–º–µ—Ä –º–æ–¥—É–ª—è')
    lesson_id = models.ForeignKey(Lessons, on_delete=models.CASCADE, blank=False, verbose_name='–ù–æ–º–µ—Ä —É—Ä–æ–∫–∞')
    test_score = models.IntegerField(blank=False, verbose_name='–û—Ü–µ–Ω–∫–∞ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–µ—Å—Ç')
    completed_at = models.CharField(blank=False, verbose_name='–î–∞—Ç–∞ –∫–æ–≥–¥–∞ –ø–µ—Ä–µ—â—ë–ª –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–∫')

    class Meta:
        verbose_name = '–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        verbose_name_plural = '–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        db_table = 'user_progress'
        managed = False


class Payment(models.Model):
    id = models.IntegerField(primary_key=True, blank=False, verbose_name='ID –∑–∞–ø–∏—Å–∏')
    tel_id = models.BigIntegerField(blank=False, verbose_name='Telegram ID –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞')
    sum = models.IntegerField(blank=False, verbose_name='–°—É–º–º–∞')
    date = models.CharField(max_length=100, blank=False, verbose_name='–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã')
    status = models.CharField(max_length=100, blank=False, verbose_name='–°—Ç–∞—Ç—É—Å')

    class Meta:
        verbose_name = '–ü–ª–∞—Ç–µ–∂–∏'
        verbose_name_plural = '–ü–ª–∞—Ç–µ–∂–∏'
        db_table = 'payment'
        managed = False

