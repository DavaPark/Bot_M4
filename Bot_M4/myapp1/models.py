from django.db import models
STATUSES = (('0', 'üü¢ –ê–∫—Ç–∏–≤–Ω—ã–π'), ('1', '–ê—Ä—Ö–∏–≤'), ('2', 'üî¥ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π'))

USER_TYPE = (('superadmin', '–°—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'),
             ('admin', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'))


class Payment(models.Model):
    id = models.AutoField(primary_key=True)
    merchant_account = models.CharField(max_length=255, verbose_name="–ú–µ—Ä—á–∞–Ω—Ç –∞–∫–∞—É–Ω—Ç")
    order_reference = models.CharField(max_length=255, unique=True, verbose_name="–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è")
    merchant_signature = models.CharField(max_length=255, verbose_name="–ü—ñ–¥–ø–∏—Å –º–µ—Ä—á–∞–Ω—Ç–∞")
    amount = models.DecimalField(max_digits=10, decimal_places=2, verbose_name="–°—É–º–∞")
    currency = models.CharField(max_length=10, verbose_name="–í–∞–ª—é—Ç–∞")
    auth_code = models.CharField(max_length=255, blank=True, null=True, verbose_name="–ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó")
    email = models.EmailField(verbose_name="Email")
    phone = models.CharField(max_length=20, verbose_name="–¢–µ–ª–µ—Ñ–æ–Ω")
    created_date = models.DateTimeField(verbose_name="–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è")
    processing_date = models.DateTimeField(verbose_name="–î–∞—Ç–∞ –æ–±—Ä–æ–±–∫–∏")
    card_pan = models.CharField(max_length=20, blank=True, null=True, verbose_name="PAN –∫–∞—Ä—Ç–∫–∏")
    card_type = models.CharField(max_length=50, blank=True, null=True, verbose_name="–¢–∏–ø –∫–∞—Ä—Ç–∫–∏")
    issuer_bank_country = models.CharField(max_length=100, blank=True, null=True, verbose_name="–ö—Ä–∞—ó–Ω–∞ –±–∞–Ω–∫—É-–µ–º—ñ—Ç–µ–Ω—Ç–∞")
    issuer_bank_name = models.CharField(max_length=255, blank=True, null=True, verbose_name="–ù–∞–∑–≤–∞ –±–∞–Ω–∫—É-–µ–º—ñ—Ç–µ–Ω—Ç–∞")
    rec_token = models.CharField(max_length=255, blank=True, null=True, verbose_name="–¢–æ–∫–µ–Ω —Ä–µ–∫—É—Ä–µ–Ω—Ç–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂—É")
    transaction_status = models.CharField(max_length=50, verbose_name="–°—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó")
    reason = models.CharField(max_length=255, blank=True, null=True, verbose_name="–ü—Ä–∏—á–∏–Ω–∞ –≤—ñ–¥–º–æ–≤–∏")
    reason_code = models.IntegerField(blank=True, null=True, verbose_name="–ö–æ–¥ –ø—Ä–∏—á–∏–Ω–∏ –≤—ñ–¥–º–æ–≤–∏")
    fee = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True, verbose_name="–ö–æ–º—ñ—Å—ñ—è")
    payment_system = models.CharField(max_length=50, blank=True, null=True, verbose_name="–ü–ª–∞—Ç—ñ–∂–Ω–∞ —Å–∏—Å—Ç–µ–º–∞")
    acquirer_bank_name = models.CharField(max_length=255, blank=True, null=True, verbose_name="–ë–∞–Ω–∫-–µ–∫–≤–∞–π—î—Ä")
    card_product = models.CharField(max_length=50, blank=True, null=True, verbose_name="–ü—Ä–æ–¥—É–∫—Ç –∫–∞—Ä—Ç–∫–∏")
    client_name = models.CharField(max_length=255, blank=True, null=True, verbose_name="–Ü–º'—è –∫–ª—ñ—î–Ω—Ç–∞")
    repay_url = models.URLField(blank=True, null=True, verbose_name="URL –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂—É")
    rrn = models.CharField(max_length=255, blank=True, null=True, verbose_name="RRN")
    terminal = models.CharField(max_length=255, blank=True, null=True, verbose_name="–¢–µ—Ä–º—ñ–Ω–∞–ª")
    acquirer = models.CharField(max_length=255, blank=True, null=True, verbose_name="–ï–∫–≤–∞–π—î—Ä")
    product_name = models.CharField(max_length=255, blank=True, null=True, verbose_name="–ù–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É")
    product_price = models.DecimalField(max_digits=10, decimal_places=2, blank=True, null=True, verbose_name="–¶—ñ–Ω–∞ —Ç–æ–≤–∞—Ä—É")
    product_count = models.IntegerField(blank=True, null=True, verbose_name="–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—É")

    def __str__(self):
        return f"–ü–ª–∞—Ç—ñ–∂ {self.order_reference} - {self.transaction_status}"

    class Meta:
        verbose_name = '–ü–ª–∞—Ç–µ–∂—ñ'
        verbose_name_plural = '–ü–ª–∞—Ç–µ–∂—ñ'


    @classmethod
    def update_or_create_from_request(cls, data):
        order_reference = data.get("order_reference")
        if not order_reference:
            return None

        obj, created = cls.objects.update_or_create(
            order_reference=order_reference,
            defaults={
                "merchant_account": data.get("merchant_account", ""),
                "merchant_signature": data.get("merchant_signature", ""),
                "amount": data.get("amount", 0),
                "currency": data.get("currency", ""),
                "auth_code": data.get("auth_code"),
                "email": data.get("email", ""),
                "phone": data.get("phone", ""),
                "created_date": data.get("created_date"),
                "processing_date": data.get("processing_date"),
                "card_pan": data.get("card_pan", ""),
                "card_type": data.get("card_type", ""),
                "issuer_bank_country": data.get("issuer_bank_country", ""),
                "issuer_bank_name": data.get("issuer_bank_name", ""),
                "rec_token": data.get("rec_token"),
                "transaction_status": data.get("transaction_status", ""),
                "reason": data.get("reason", ""),
                "reason_code": data.get("reason_code", 0),
                "fee": data.get("fee", 0),
                "payment_system": data.get("payment_system", ""),
                "acquirer_bank_name": data.get("acquirer_bank_name", ""),
                "card_product": data.get("card_product", ""),
                "client_name": data.get("client_name", ""),
                "repay_url": data.get("repay_url", ""),
                "rrn": data.get("rrn"),
                "terminal": data.get("terminal", ""),
                "acquirer": data.get("acquirer", ""),
                "product_name": data.get("product_name", ""),
                "product_price": data.get("product_price", 0),
                "product_count": data.get("product_count", 0),
            }
        )
        return obj


class User(models.Model):
    tel_id = models.BigIntegerField(unique=True, verbose_name="Telegram ID")
    name = models.CharField(max_length=255, verbose_name="–Ü–º'—è")
    email = models.CharField(max_length=255, verbose_name="Email")
    username = models.CharField(max_length=255, verbose_name="Username")
    context = models.TextField(blank=True, null=True, verbose_name="–ö–æ–Ω—Ç–µ–∫—Å—Ç")
    is_blocked = models.BooleanField(default=False, verbose_name="–ó–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π")
    is_admin = models.BooleanField(default=False, verbose_name="–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä")
    create_date = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è")
    module_start_date = models.DateTimeField(blank=True, null=True, verbose_name="–î–∞—Ç–∞ –ø–æ—á–∞—Ç–∫—É –º–æ–¥—É–ª—è")
    current_lesson = models.IntegerField(blank=True, null=True, verbose_name="–ü–æ—Ç–æ—á–Ω–∏–π —É—Ä–æ–∫")
    last_date = models.DateTimeField(blank=True, null=True, verbose_name="–û—Å—Ç–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å")
    current_module = models.IntegerField(blank=True, null=True, verbose_name="–ü–æ—Ç–æ—á–Ω–∏–π –º–æ–¥—É–ª—å")
    phone = models.CharField(max_length=255, blank=True, null=True, verbose_name="–¢–µ–ª–µ—Ñ–æ–Ω")
    region = models.CharField(max_length=255, blank=True, null=True, verbose_name="–û–±–ª–∞—Å—Ç—å")
    denomination = models.CharField(max_length=255, blank=True, null=True, verbose_name="–î–µ–Ω–æ–º—ñ–Ω–∞—Ü—ñ—è")
    role = models.CharField(max_length=255, blank=True, null=True, verbose_name="–†–æ–ª—å —É —Å–ª—É–∂—ñ–Ω–Ω—ñ")

    class Meta:
        verbose_name = "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"
        verbose_name_plural = "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ"
        db_table = 'users'

    def __str__(self):
        return self.name


class UserProgress(models.Model):
    id = models.AutoField(primary_key=True, verbose_name='ID –∑–∞–ø–∏—Å—É')
    tel_id = models.BigIntegerField(verbose_name='Telegram ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞')
    name = models.CharField(max_length=255, verbose_name='–Ü–º‚Äô—è')
    email = models.CharField(verbose_name='Email', max_length=255)
    # module_id = models.ForeignKey(Module, on_delete=models.CASCADE, blank=False, verbose_name='–ù–æ–º–µ—Ä –º–æ–¥—É–ª—è')
    # lesson_id = models.ForeignKey(Lessons, on_delete=models.CASCADE, blank=False, verbose_name='–ù–æ–º–µ—Ä —É—Ä–æ–∫—É')
    test_score = models.IntegerField(blank=False, verbose_name='–û—Ü—ñ–Ω–∫–∞ –∑–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ç–µ—Å—Ç')
    completed_at = models.CharField(blank=False, max_length=255, verbose_name='–î–∞—Ç–∞ –ø–µ—Ä–µ—Ö–æ–¥—É –Ω–∞ –Ω–æ–≤–∏–π —É—Ä–æ–∫')
    progress = models.JSONField(blank=True, verbose_name="–ü—Ä–æ–≥—Ä–µ—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞")

    class Meta:
        verbose_name = '–ü—Ä–æ–≥—Ä–µ—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞'
        verbose_name_plural = '–ü—Ä–æ–≥—Ä–µ—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤'
        db_table = 'user_progress'
        managed = False


class Archive(models.Model):
    id = models.IntegerField(primary_key=True, verbose_name='ID –∑–∞–ø–∏—Å—É')
    tel_id = models.BigIntegerField(verbose_name='Telegram ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞')
    name = models.CharField(max_length=255, verbose_name='–Ü–º‚Äô—è')
    email = models.CharField(max_length=255, unique=True, verbose_name='Email')
    context = models.CharField(max_length=255, blank=False, verbose_name='–ö–æ–Ω—Ç–µ–∫—Å—Ç')
    is_blocked = models.CharField(max_length=255, default=False, choices=STATUSES,
                                   verbose_name='–°—Ç–∞—Ç—É—Å')
    is_admin = models.CharField(max_length=255, default=False, choices=USER_TYPE,
                                 verbose_name='–¢–∏–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞')
    last_date = models.CharField(max_length=255, verbose_name='–î–∞—Ç–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤ –∞—Ä—Ö—ñ–≤')

    class Meta:
        verbose_name = '–ê—Ä—Ö—ñ–≤'
        verbose_name_plural = '–ê—Ä—Ö—ñ–≤'
        db_table = 'archive'
        managed = False


class Deleted(models.Model):
    id = models.IntegerField(primary_key=True, verbose_name='ID –∑–∞–ø–∏—Å—É')
    tel_id = models.BigIntegerField(verbose_name='Telegram ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞')
    name = models.CharField(max_length=255, verbose_name='–Ü–º‚Äô—è')
    email = models.CharField(max_length=255, unique=True, verbose_name='Email')
    context = models.CharField(max_length=255, blank=False, verbose_name='–ö–æ–Ω—Ç–µ–∫—Å—Ç')
    is_blocked = models.CharField(max_length=255, default=False, choices=STATUSES,
                                  verbose_name='–°—Ç–∞—Ç—É—Å')
    is_admin = models.CharField(max_length=255, default=False, choices=USER_TYPE,
                                verbose_name='–¢–∏–ø –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞')
    last_date = models.CharField(max_length=255,verbose_name='–î–∞—Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è')

    class Meta:
        verbose_name = '–ó–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ'
        verbose_name_plural = '–ó–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ'
        db_table = 'deleted'
        managed = False



# class Module(models.Model):
#     id = models.IntegerField(primary_key=True, blank=False, verbose_name='ID –∑–∞–ø–∏—Å–∏')
#     module_id = models.IntegerField(blank=False, verbose_name='–ù–æ–º–µ—Ä –º–æ–¥—É–ª—è')
#     title = models.CharField(max_length=100, blank=False, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è')
#
#     class Meta:
#         verbose_name = '–ú–æ–¥—É–ª–∏'
#         verbose_name_plural = '–ú–æ–¥—É–ª–∏'
#         db_table = 'module'
#         managed = False
#
#
# class Lessons(models.Model):
#     id = models.IntegerField(primary_key=True, blank=False, verbose_name='ID –∑–∞–ø–∏—Å–∏')
#     lesson_id = models.IntegerField(blank=False, verbose_name='–ù–æ–º–µ—Ä —É—Ä–æ–∫–∞')
#     module_id = models.ForeignKey(Module, on_delete=models.CASCADE, blank=False, verbose_name='–ù–æ–º–µ—Ä –º–æ–¥—É–ª—è')
#     title = models.CharField(max_length=100, blank=False, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞')
#     video = models.CharField(max_length=1000, blank=False, verbose_name='–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ')
#     test_link = models.CharField(max_length=1000, blank=False, verbose_name='–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ—Å—Ç')
#     pass_score = models.IntegerField(blank=False, verbose_name='–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∑–∞ —Ç–µ—Å—Ç')
#
#     class Meta:
#         verbose_name = '–£—Ä–æ–∫–∏'
#         verbose_name_plural = '–£—Ä–æ–∫–∏'
#         db_table = 'lessons'
#         managed = False
#
#
#
#
# class Payment(models.Model):
#     id = models.IntegerField(primary_key=True, blank=False, verbose_name='ID –∑–∞–ø–∏—Å–∏')
#     tel_id = models.BigIntegerField(blank=False, verbose_name='Telegram ID –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞')
#     sum = models.IntegerField(blank=False, verbose_name='–°—É–º–º–∞')
#     date = models.CharField(max_length=100, blank=False, verbose_name='–î–∞—Ç–∞ –æ–ø–ª–∞—Ç—ã')
#     status = models.CharField(max_length=100, blank=False, verbose_name='–°—Ç–∞—Ç—É—Å')
#
#     class Meta:
#         verbose_name = '–ü–ª–∞—Ç–µ–∂–∏'
#         verbose_name_plural = '–ü–ª–∞—Ç–µ–∂–∏'
#         db_table = 'payment'
#         managed = False
#
