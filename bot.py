import asyncio
import json
import logging
import re

from aiogram.client.default import DefaultBotProperties
from aiogram import Bot, Dispatcher, F
from aiogram.fsm.context import FSMContext
from aiogram.filters import CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, \
    KeyboardButton, ReplyKeyboardMarkup
from scripts.config import TOKEN_API, W4P_KEY, DOMAIN_NAME, MERCHANT_ACCOUNT, AMOUNT
from scripts.db_manager import AsyncDB, block_inactive_users, \
    get_lesson_data_json, update_current_video_index, update_current_test_index, update_current_video_index_0, \
    get_current_video_index, update_current_test_index_0, get_current_test_index
from datetime import datetime, date
from scripts.markup import get_lesson_keyboard

import scripts.markup as sm
from scripts.texts import *
from scripts.way4pay import WayForPay

import schedule

bot = Bot(TOKEN_API, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()


async def check_user(tel_id):
    user = await AsyncDB.get_user(tel_id)
    if user is not None:
        if user.is_blocked == 1:
            await bot.send_message(tel_id, text=block_text)
            return False
        else:
            return True
    return False


@dp.message(CommandStart())
async def cmd_start(message: Message):
    await AsyncDB.update_user(message.chat.id, last_date=datetime.now().date())
    existing_user = await AsyncDB.get_user_by_telegram_id(message.chat.id)
    user = await AsyncDB.get_user(message.chat.id)
    if existing_user:
        video_id = 'BAACAgIAAxkBAAIGomfRWLc0u1m1cDUngcSI2BFFGhCaAALYagACX0WISsgyvOR_ge0ONgQ'
        await message.answer_video(video_id,
                                   caption="üéâ <b>–í—ñ—Ç–∞—î–º–æ –Ω–∞ –Ω–∞–≤—á–∞–Ω–Ω—ñ!</b>\n"
                                           "\n–¢–∏ –∑—Ä–æ–±–∏–≤ –≤–∞–∂–ª–∏–≤–∏–π –∫—Ä–æ–∫, —ñ –º–∏ —Ä–∞–¥—ñ –≤—ñ—Ç–∞—Ç–∏ —Ç–µ–±–µ —É —Ü—ñ–π –ø–æ–¥–æ—Ä–æ–∂—ñ! "
                                           "–í—ñ–¥–∫—Ä–∏—Ç—ñ—Å—Ç—å –¥–æ –Ω–æ–≤–æ–≥–æ ‚Äì —Ü–µ –∫–ª—é—á –¥–æ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è. –¶–µ–π –∫—É—Ä—Å –¥–æ–ø–æ–º–æ–∂–µ —Ç–æ–±—ñ "
                                           "—Ä–æ–∑–∫—Ä–∏—Ç–∏ —Å–≤–æ—î –ø–æ–∫–ª–∏–∫–∞–Ω–Ω—è —Ç–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –∑–Ω–∞–Ω–Ω—è –¥–ª—è —Å–ª—É–∂—ñ–Ω–Ω—è."
                                           "\n\n<b>üîπ –Ø–∫ –æ—Ç—Ä–∏–º–∞—Ç–∏ –º–∞–∫—Å–∏–º—É–º?</b> "
                                           "\n\n‚úÖ –ü–æ—Å—Ç–∞–≤ —Å–æ–±—ñ –∑–∞ –º–µ—Ç—É –≤–∑—è—Ç–∏ –≤—Å–µ, —â–æ –º–æ–∂–µ –¥–∞—Ç–∏ —Ü–µ –Ω–∞–≤—á–∞–Ω–Ω—è."
                                           "\n‚úÖ –ü—Ä–æ–π–¥–∏ –≤—Å—ñ 6 –º–æ–¥—É–ª—ñ–≤ —É –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ —Ç–µ—Ä–º—ñ–Ω–∏ ‚Äì –∫–æ–∂–µ–Ω –º–æ–¥—É–ª—å —Ç—Ä–∏–≤–∞—î "
                                           "2 —Ç–∏–∂–Ω—ñ."
                                           "\n‚úÖ –ë—É–¥—å –∞–∫—Ç–∏–≤–Ω–∏–º —É –Ω–∞–≤—á–∞–Ω–Ω—ñ, —Å—Ç–∞–≤ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è —Ç–∞ –≤–∑–∞—î–º–æ–¥—ñ–π –∑—ñ —Å–ø—ñ–ª—å–Ω–æ—Ç–æ—é."
                                           "\n\nüí° <b>–î–æ—Å–ª—ñ–¥–∏ –º–µ–Ω—é, —â–æ–± –ª–µ–≥–∫–æ –æ—Ä—ñ—î–Ω—Ç—É–≤–∞—Ç–∏—Å—è —Ç–∞ —Ä—É—Ö–∞—Ç–∏—Å—è –≤–ø–µ—Ä–µ–¥!</b>"
                                           "\n\nüéØ <b>–¢–∏ –≥–æ—Ç–æ–≤–∏–π? –ü–æ—á–∏–Ω–∞–π –Ω–∞–≤—á–∞–Ω–Ω—è –≤–∂–µ –∑–∞—Ä–∞–∑!</b>",
                                   reply_markup=sm.main_menu(user.is_admin))
    else:

        video_id = "BAACAgIAAxkBAAIGxGfRd09oFFHdKjc5l7m9VhCbdXLiAAKxbAACX0WISu39lxhxZ-NBNgQ"
        await message.answer_video(video_id,
                                   caption="üëã –ü—Ä–∏–≤—ñ—Ç! <b>–†–∞–¥—ñ, —â–æ —Ç–∏ —Ç—É—Ç!</b> –Ø–∫—â–æ —Ç–∏ –¥–∏–≤–∏—à—Å—è —Ü–µ –≤—ñ–¥–µ–æ, –∑–Ω–∞—á–∏—Ç—å, "
                                           "–ø—Ä–∞–≥–Ω–µ—à –∑—Ä–æ–∑—É–º—ñ—Ç–∏ —Å–≤—ñ–π –ø–æ–∫–ª–∏–∫. –Ü —Ü–µ —á—É–¥–æ–≤–æ! üéØ\n"
                                           "\n<b>–ú4 –Ü–Ω—Ç–µ–Ω—Å–∏–≤</b> ‚Äì —Ü–µ 90 –¥–Ω—ñ–≤ –ø—Ä–∞–∫—Ç–∏—á–Ω–æ–≥–æ –Ω–∞–≤—á–∞–Ω–Ω—è, —â–æ –¥–æ–ø–æ–º–æ–∂–µ —Ç–æ–±—ñ "
                                           "–∑–Ω–∞–π—Ç–∏ —Å–≤–æ—î –º—ñ—Å—Ü–µ –≤ —Å–ª—É–∂—ñ–Ω–Ω—ñ. –ú–∏ –ø—ñ–¥—Ç—Ä–∏–º–∞—î–º–æ —Ç–µ–±–µ –Ω–∞ —Ü—å–æ–º—É —à–ª—è—Ö—É —Ç–∞ –¥–∞–º–æ "
                                           "—ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –¥–ª—è –≤–ø–µ–≤–Ω–µ–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç—É.\n"
                                           "\n<b>–Ø–∫ –ø–æ—á–∞—Ç–∏?</b>\n"
                                           "\nüîπ <b>–©–æ–± –≤–ø–µ–≤–Ω–∏—Ç–∏—Å—è, —â–æ —Ü–µ –¥–ª—è —Ç–µ–±–µ</b> ‚Äì –ø–µ—Ä–µ–≥–ª—è–Ω—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—ñ–¥ "
                                           "–≤—ñ–¥–µ–æ: –ø—Ä–æ –Ω–∞—Å, –ø—Ä–æ–≥—Ä–∞–º—É –∫—É—Ä—Å—É, –≤—ñ–¥–≥—É–∫–∏ —É—á–∞—Å–Ω–∏–∫—ñ–≤. –î–æ—Å–ª—ñ–¥–∂—É–π —Ç–∞ "
                                           "–ø—Ä–∏–π–º–∞–π —Ä—ñ—à–µ–Ω–Ω—è!\n"
                                           "üîπ <b>–ì–æ—Ç–æ–≤–∏–π –∑—Ä–æ–±–∏—Ç–∏ –∫—Ä–æ–∫?</b> –ù–∞—Ç–∏—Å–∫–∞–π '–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è', –∑–∞–ø–æ–≤–Ω—é–π "
                                           "—Ñ–æ—Ä–º—É —Ç–∞ —Å—Ç–∞–≤–∞–π —á–∞—Å—Ç–∏–Ω–æ—é –Ω–∞—à–æ—ó —Å–ø—ñ–ª—å–Ω–æ—Ç–∏! üöÄ",
                                   reply_markup=sm.main_regicter_inline_markup)


@dp.callback_query(F.data == 'program')
async def program(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer_photo(
        photo='AgACAgIAAxkBAANaZ8BbkqdO-1QYenBcyDJ3RqdnzrwAAkDmMRtApwABSsqe1imkYgvmAQADAgADeQADNgQ')

    video_id = "BAACAgIAAxkBAAIG72fRfmj_94U39Gi4oJ5vXuPJg1NOAAISbQACX0WISmTvL-AFOLPuNgQ"
    await callback.message.answer_video(video_id)

    await callback.message.answer(program_text,
                                  reply_markup=sm.program_go_back_inline_markup)


@dp.callback_query(F.data == 'program_go_back')
async def program_go_back(callback: CallbackQuery):
    await callback.answer()
    video_id = "BAACAgIAAxkBAAIGxGfRd09oFFHdKjc5l7m9VhCbdXLiAAKxbAACX0WISu39lxhxZ-NBNgQ"
    await callback.message.answer_video(video_id,
                                        caption="üëã –ü—Ä–∏–≤—ñ—Ç! <b>–†–∞–¥—ñ, —â–æ —Ç–∏ —Ç—É—Ç!</b> –Ø–∫—â–æ —Ç–∏ –¥–∏–≤–∏—à—Å—è —Ü–µ –≤—ñ–¥–µ–æ, "
                                                "–∑–Ω–∞—á–∏—Ç—å, –ø—Ä–∞–≥–Ω–µ—à"
                                                " –∑—Ä–æ–∑—É–º—ñ—Ç–∏ —Å–≤—ñ–π –ø–æ–∫–ª–∏–∫. –Ü —Ü–µ —á—É–¥–æ–≤–æ! üéØ\n"
                                                "\n<b>–ú4 –Ü–Ω—Ç–µ–Ω—Å–∏–≤</b> ‚Äì —Ü–µ 90 –¥–Ω—ñ–≤ –ø—Ä–∞–∫—Ç–∏—á–Ω–æ–≥–æ –Ω–∞–≤—á–∞–Ω–Ω—è, —â–æ –¥–æ–ø–æ–º–æ–∂–µ"
                                                " —Ç–æ–±—ñ –∑–Ω–∞–π—Ç–∏ —Å–≤–æ—î –º—ñ—Å—Ü–µ –≤ —Å–ª—É–∂—ñ–Ω–Ω—ñ. –ú–∏ –ø—ñ–¥—Ç—Ä–∏–º–∞—î–º–æ —Ç–µ–±–µ –Ω–∞ —Ü—å–æ–º—É —à–ª—è—Ö—É"
                                                " —Ç–∞ –¥–∞–º–æ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –¥–ª—è –≤–ø–µ–≤–Ω–µ–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç—É.\n"
                                                "\n<b>–Ø–∫ –ø–æ—á–∞—Ç–∏?</b>\n"
                                                "\nüîπ <b>–©–æ–± –≤–ø–µ–≤–Ω–∏—Ç–∏—Å—è, —â–æ —Ü–µ –¥–ª—è —Ç–µ–±–µ</b> ‚Äì –ø–µ—Ä–µ–≥–ª—è–Ω—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é"
                                                " –ø—ñ–¥ –≤—ñ–¥–µ–æ: –ø—Ä–æ –Ω–∞—Å, –ø—Ä–æ–≥—Ä–∞–º—É –∫—É—Ä—Å—É, –≤—ñ–¥–≥—É–∫–∏ —É—á–∞—Å–Ω–∏–∫—ñ–≤. –î–æ—Å–ª—ñ–¥–∂—É–π"
                                                " —Ç–∞ –ø—Ä–∏–π–º–∞–π —Ä—ñ—à–µ–Ω–Ω—è!\n"
                                                "üîπ <b>–ì–æ—Ç–æ–≤–∏–π –∑—Ä–æ–±–∏—Ç–∏ –∫—Ä–æ–∫?</b> –ù–∞—Ç–∏—Å–∫–∞–π '–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è', –∑–∞–ø–æ–≤–Ω—é–π"
                                                " —Ñ–æ—Ä–º—É —Ç–∞ —Å—Ç–∞–≤–∞–π —á–∞—Å—Ç–∏–Ω–æ—é –Ω–∞—à–æ—ó —Å–ø—ñ–ª—å–Ω–æ—Ç–∏! üöÄ",
                                        reply_markup=sm.main_regicter_inline_markup)


@dp.callback_query(F.data == 'why_need')
async def why_need(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer_photo(
        photo='AgACAgIAAxkBAAOjZ8BmyzugXiu1u03VDUA7QorTKtgAApjpMRtXDAhKvNirwneIGxUBAAMCAAN5AAM2BA')

    video_id = 'BAACAgIAAxkBAAIGzWfReJSb15707jqgSoBCl1DA_-XEAALBbAACX0WISh4jsP2wXSPrNgQ'
    await callback.message.answer_video(video_id)

    await callback.message.answer(why_need_text,
                                  reply_markup=sm.program_go_back_inline_markup)


@dp.callback_query(F.data == 'register')
async def register(callback: CallbackQuery):
    await callback.answer()
    video_id = 'BAACAgIAAxkBAAIHAWfRf63YsHvi-K8GitQhop6uRUrRAAIjbQACX0WISrWlyf_PeDBZNgQ'
    await callback.message.answer_video(video_id,
                                        caption='üéâ –¢–∏ –Ω–∞ –∫—Ä–æ–∫ –±–ª–∏–∂—á–µ –¥–æ –∑–º—ñ–Ω! –ó–∞—Ä–∞–∑ –≤–∞–∂–ª–∏–≤–æ –≤–∏–∑–Ω–∞—á–∏—Ç–∏—Å—è: —á–∏ –≥–æ—Ç–æ–≤–∏–π'
                                                ' —Ç–∏ —ñ–Ω–≤–µ—Å—Ç—É–≤–∞—Ç–∏ —á–∞—Å —É —Å–≤–æ—î –ø–æ–∫–ª–∏–∫–∞–Ω–Ω—è?\n'
                                                '\n<b>–©–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–Ω–∞—Ç–∏?</b>\n'
                                                '‚úÖ <b>–¶—ñ–Ω–Ω—ñ—Å—Ç—å –Ω–∞–≤—á–∞–Ω–Ω—è ‚Äì 145$</b>, –∞–ª–µ –¥–ª—è —É–∫—Ä–∞—ó–Ω—Ü—ñ–≤ –¥—ñ—î'
                                                ' —Å–ø–µ—Ü–ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è ‚Äì <b>500 –≥—Ä–Ω</b>. –ú–∏ –≤—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É –æ–ø–ª–∞—Ç—É, '
                                                '—â–æ–± –¥–æ–ª—É—á–∞–ª–∏—Å—è –ª–∏—à–µ —Ç—ñ, —Ö—Ç–æ —Å–µ—Ä–π–æ–∑–Ω–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π –Ω–∞–≤—á–∞—Ç–∏—Å—è –π'
                                                ' –∑–∞—Å—Ç–æ—Å–æ–≤—É–≤–∞—Ç–∏ –∑–Ω–∞–Ω–Ω—è –Ω–∞ –ø—Ä–∞–∫—Ç–∏—Ü—ñ.'
                                                '‚úÖ \n<b>–ü–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º –ø—Ä–∏–π–º–∏ —É–º–æ–≤–∏</b> ‚Äì —Ü–µ –≥–∞—Ä–∞–Ω—Ç—ñ—è —è–∫—ñ—Å–Ω–æ–≥–æ'
                                                ' –Ω–∞–≤—á–∞–Ω–Ω—è.\n'
                                                '\n<b>–Ø–∫ –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è?</b>\n'
                                                '\n1Ô∏è‚É£ <b>–ü—Ä–æ—á–∏—Ç–∞–π —É–º–æ–≤–∏</b> ‚Äì –Ω–∞—Ç–∏—Å–Ω–∏ "–ü—Ä–æ—á–∏—Ç–∞—Ç–∏ —É–º–æ–≤–∏".\n'
                                                '2Ô∏è‚É£ <b>–ü—ñ–¥—Ç–≤–µ—Ä–¥—å –∑–≥–æ–¥—É</b> ‚Äì –Ω–∞—Ç–∏—Å–Ω–∏ "–ü—Ä–∏–π–Ω—è—Ç–∏ —É–º–æ–≤–∏".\n'
                                                '3Ô∏è‚É£ <b>–ó–∞–ø–æ–≤–Ω–∏ —Ñ–æ—Ä–º—É</b> —Ç–∞ –∑–∞–ª–∏—à e-mail.\n'
                                                '4Ô∏è‚É£ <b>–û–ø–ª–∞—Ç–∏ –∫—É—Ä—Å</b> ‚Äì —à–≤–∏–¥–∫–æ —Ç–∞ –±–µ–∑–ø–µ—á–Ω–æ —á–µ—Ä–µ–∑ WayForPay.\n'
                                                '\nüöÄ –Ø–∫—â–æ —Ç–∏ –≥–æ—Ç–æ–≤–∏–π –¥—ñ—è—Ç–∏ ‚Äì –ø–æ—á–Ω–µ–º–æ –ø—Ä–æ—Å—Ç–æ –∑–∞—Ä–∞–∑!',
                                        reply_markup=sm.register_inline_markup)


@dp.callback_query(F.data == 'go_back_register')
async def go_back_register(callback: CallbackQuery):
    await callback.answer()
    video_id = 'BAACAgIAAxkBAAIHAWfRf63YsHvi-K8GitQhop6uRUrRAAIjbQACX0WISrWlyf_PeDBZNgQ'
    await callback.message.answer_video(video_id,
                                        caption='üéâ –¢–∏ –Ω–∞ –∫—Ä–æ–∫ –±–ª–∏–∂—á–µ –¥–æ –∑–º—ñ–Ω! –ó–∞—Ä–∞–∑ –≤–∞–∂–ª–∏–≤–æ –≤–∏–∑–Ω–∞—á–∏—Ç–∏—Å—è: —á–∏ –≥–æ—Ç–æ–≤–∏–π'
                                                ' —Ç–∏ —ñ–Ω–≤–µ—Å—Ç—É–≤–∞—Ç–∏ —á–∞—Å —É —Å–≤–æ—î –ø–æ–∫–ª–∏–∫–∞–Ω–Ω—è?\n'
                                          '\n<b>–©–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–Ω–∞—Ç–∏?</b>\n'
                                          '‚úÖ <b>–¶—ñ–Ω–Ω—ñ—Å—Ç—å –Ω–∞–≤—á–∞–Ω–Ω—è ‚Äì 145$</b>, –∞–ª–µ –¥–ª—è —É–∫—Ä–∞—ó–Ω—Ü—ñ–≤ –¥—ñ—î —Å–ø–µ—Ü–ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è ‚Äì '
                                          '<b>500 –≥—Ä–Ω</b>. –ú–∏ –≤—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É –æ–ø–ª–∞—Ç—É, —â–æ–± –¥–æ–ª—É—á–∞–ª–∏—Å—è –ª–∏—à–µ '
                                          '—Ç—ñ, —Ö—Ç–æ —Å–µ—Ä–π–æ–∑–Ω–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π –Ω–∞–≤—á–∞—Ç–∏—Å—è –π –∑–∞—Å—Ç–æ—Å–æ–≤—É–≤–∞—Ç–∏ –∑–Ω–∞–Ω–Ω—è –Ω–∞ –ø—Ä–∞–∫—Ç–∏—Ü—ñ.'
                                          '‚úÖ \n<b>–ü–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º –ø—Ä–∏–π–º–∏ —É–º–æ–≤–∏</b> ‚Äì —Ü–µ –≥–∞—Ä–∞–Ω—Ç—ñ—è —è–∫—ñ—Å–Ω–æ–≥–æ –Ω–∞–≤—á–∞–Ω–Ω—è.\n'
                                          '\n<b>–Ø–∫ –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è?</b>\n'
                                          '\n1Ô∏è‚É£ <b>–ü—Ä–æ—á–∏—Ç–∞–π —É–º–æ–≤–∏</b> ‚Äì –Ω–∞—Ç–∏—Å–Ω–∏ "–ü—Ä–æ—á–∏—Ç–∞—Ç–∏ —É–º–æ–≤–∏".\n'
                                          '2Ô∏è‚É£ <b>–ü—ñ–¥—Ç–≤–µ—Ä–¥—å –∑–≥–æ–¥—É</b> ‚Äì –Ω–∞—Ç–∏—Å–Ω–∏ "–ü—Ä–∏–π–Ω—è—Ç–∏ —É–º–æ–≤–∏".\n'
                                          '3Ô∏è‚É£ <b>–ó–∞–ø–æ–≤–Ω–∏ —Ñ–æ—Ä–º—É</b> —Ç–∞ –∑–∞–ª–∏—à e-mail.\n'
                                          '4Ô∏è‚É£ <b>–û–ø–ª–∞—Ç–∏ –∫—É—Ä—Å</b> ‚Äì —à–≤–∏–¥–∫–æ —Ç–∞ –±–µ–∑–ø–µ—á–Ω–æ —á–µ—Ä–µ–∑ WayForPay.\n'
                                          '\nüöÄ –Ø–∫—â–æ —Ç–∏ –≥–æ—Ç–æ–≤–∏–π –¥—ñ—è—Ç–∏ ‚Äì –ø–æ—á–Ω–µ–º–æ –ø—Ä–æ—Å—Ç–æ –∑–∞—Ä–∞–∑!',
                                        reply_markup=sm.main_regicter_inline_markup)


class RegisterState(StatesGroup):
    waiting_for_email = State()


EMAIL_REGEX = r"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"


@dp.callback_query(F.data == 'accept')
async def accept(callback: CallbackQuery, state: FSMContext):
    await state.set_state(RegisterState.waiting_for_email)
    await callback.answer()
    existing_user = await AsyncDB.get_user_by_telegram_id(callback.from_user.id)
    if existing_user:
        await callback.message.answer('‚úÖ –í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ! –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ...',
                                      reply_markup=sm.accept_inline_markup)
    else:
        await callback.message.answer('üéâ –¢–∏ –º–∞–π–∂–µ –≥–æ—Ç–æ–≤–∏–π —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –Ω–∞–≤—á–∞–Ω–Ω—è! –©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø, –Ω–∞–º –ø–æ—Ç—Ä—ñ–±–µ–Ω'
                                      ' —Ç–≤—ñ–π e-mail ‚Äì Telegram –¥–æ–∑–≤–æ–ª—è—î –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ –ª–∏—à–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–º'
                                      ' —É —Å–∏—Å—Ç–µ–º—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º.\n'
                                      '\n<b>–©–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑—Ä–æ–±–∏—Ç–∏?</b>\n'
                                      '\n‚úâÔ∏è <b>–í–≤–µ–¥–∏ —Å–≤—ñ–π e-mail</b> —É –ø–æ–ª–µ –Ω–∏–∂—á–µ. –ó–∞–ø–∏—à–∏ –π–æ–≥–æ, —â–æ–± –Ω–µ –∑–∞–±—É—Ç–∏!\n'
                                      'üîê <b>–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Å—è, —â–æ –≤—ñ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π</b>, —â–æ–± –Ω–µ –≤—Ç—Ä–∞—Ç–∏—Ç–∏ –¥–æ—Å—Ç—É–ø.\n'
                                      '‚úÖ<b>–î–∞–ª—ñ ‚Äì –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏</b>, –ø—ñ—Å–ª—è —á–æ–≥–æ –∑–º–æ–∂–µ—à –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –æ–ø–ª–∞—Ç–∏.\n'
                                      '\nüöÄ–í—Å–µ –≥–æ—Ç–æ–≤–æ? –¢–æ–¥—ñ –≤–ø–µ—Ä–µ–¥!')


@dp.message(RegisterState.waiting_for_email)
async def process_email(message: Message, state: FSMContext):
    email = message.text.strip()
    if not re.match(EMAIL_REGEX, email):
        await message.answer('‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π email. –í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É –∞–¥—Ä–µ—Å—É, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: example@gmail.com')
        return

    await state.update_data(email=email)
    user_data = await state.get_data()
    await AsyncDB.create_user(
        telegram_id=message.chat.id,
        name=message.from_user.full_name,
        email=user_data["email"],
        username=message.from_user.username
    )
    await AsyncDB.create_user_progress(telegram_id=message.chat.id)
    await bot.send_message(
        message.chat.id,
        "üéØ –¢–∏ –º–∞–π–∂–µ –Ω–∞ —Å—Ç–∞—Ä—Ç—ñ! –ó–∞–ª–∏—à–∏–≤—Å—è –≤–∞–∂–ª–∏–≤–∏–π –∫—Ä–æ–∫ ‚Äì –∑–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É. –¶–µ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∞ —É–º–æ–≤–∞ –¥–ª—è"
        " —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —Ç–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ –∫—É—Ä—Å—É.\n"
        "\n–ê–Ω–∫–µ—Ç–∞ –¥–æ–ø–æ–º–æ–∂–µ –Ω–∞–º –∫—Ä–∞—â–µ –∑—Ä–æ–∑—É–º—ñ—Ç–∏ —Ç–≤–æ—ó –ø–æ—Ç—Ä–µ–±–∏ —Ç–∞ –∑—Ä–æ–±–∏—Ç–∏ –Ω–∞–≤—á–∞–Ω–Ω—è –±—ñ–ª—å—à —Ü—ñ–Ω–Ω–∏–º –¥–ª—è —Ç–µ–±–µ. –ê –¥–ª—è —Ç–µ–±–µ ‚Äì —Ü–µ"
        " –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å —É—Å–≤—ñ–¥–æ–º–∏—Ç–∏ —Å–≤–æ—ó —Ü—ñ–ª—ñ —Ç–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫–æ—Ä–∏—Å—Ç—å\n"
        "\n<b>–ß–æ–º—É —Ü–µ –≤–∞–∂–ª–∏–≤–æ?</b>\n"
        "\nüìù –ß—ñ—Ç–∫—ñ—à–µ –≤–∏–∑–Ω–∞—á–∏—à —Å–≤–æ—ó –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤—ñ–¥ –∫—É—Ä—Å—É.\n"
        "üìä –ú–∏ –∞–¥–∞–ø—Ç—É—î–º–æ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ –ø—ñ–¥ –ø–æ—Ç—Ä–µ–±–∏ —É—á–∞—Å–Ω–∏–∫—ñ–≤.\n"
        "ü§ù –°—Ç–∞–Ω–µ—à —á–∞—Å—Ç–∏–Ω–æ—é —Å–ø—ñ–ª—å–Ω–æ—Ç–∏ –æ–¥–Ω–æ–¥—É–º—Ü—ñ–≤.\n"
        "\n<b>–©–æ —Ä–æ–±–∏—Ç–∏?</b>\n"
        "\n1Ô∏è‚É£ <b>–ó–∞–ø–æ–≤–Ω–∏ –∞–Ω–∫–µ—Ç—É</b> ‚Äì –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ.\n"
        "2Ô∏è‚É£ <b>–ü–æ–≤–µ—Ä–Ω–∏—Å—è —Ç–∞ –Ω–∞—Ç–∏—Å–Ω–∏ '–Ø –∑–∞–ø–æ–≤–Ω–∏–≤/–ª–∞ –∞–Ω–∫–µ—Ç—É'</b>, —â–æ–± –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –æ–ø–ª–∞—Ç–∏.\n"
        "\nüöÄ –¢–∏ –≥–æ—Ç–æ–≤–∏–π? –¢–æ–¥—ñ –≤–ø–µ—Ä–µ–¥!\n",
        reply_markup=sm.form_inline_markup)
    await state.clear()


@dp.callback_query(F.data == 'go_back_accept')
async def register(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer('‚úÖ –í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ! –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ...',
                                  reply_markup=sm.register_inline_markup)


@dp.callback_query(F.data == 'form')
async def form(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer("üéØ –¢–∏ –º–∞–π–∂–µ –Ω–∞ —Å—Ç–∞—Ä—Ç—ñ! –ó–∞–ª–∏—à–∏–≤—Å—è –≤–∞–∂–ª–∏–≤–∏–π –∫—Ä–æ–∫ ‚Äì –∑–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É."
                                  " –¶–µ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∞ —É–º–æ–≤–∞ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —Ç–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ –∫—É—Ä—Å—É.\n"
                                  "\n–ê–Ω–∫–µ—Ç–∞ –¥–æ–ø–æ–º–æ–∂–µ –Ω–∞–º –∫—Ä–∞—â–µ –∑—Ä–æ–∑—É–º—ñ—Ç–∏ —Ç–≤–æ—ó –ø–æ—Ç—Ä–µ–±–∏ —Ç–∞ –∑—Ä–æ–±–∏—Ç–∏ –Ω–∞–≤—á–∞–Ω–Ω—è –±—ñ–ª—å—à —Ü—ñ–Ω–Ω–∏–º"
                                  " –¥–ª—è —Ç–µ–±–µ. –ê –¥–ª—è —Ç–µ–±–µ ‚Äì —Ü–µ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å —É—Å–≤—ñ–¥–æ–º–∏—Ç–∏ —Å–≤–æ—ó —Ü—ñ–ª—ñ —Ç–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏"
                                  " –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫–æ—Ä–∏—Å—Ç—å\n"
                                  "\n<b>–ß–æ–º—É —Ü–µ –≤–∞–∂–ª–∏–≤–æ?</b>\n"
                                  "\nüìù –ß—ñ—Ç–∫—ñ—à–µ –≤–∏–∑–Ω–∞—á–∏—à —Å–≤–æ—ó –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤—ñ–¥ –∫—É—Ä—Å—É.\n"
                                  "üìä –ú–∏ –∞–¥–∞–ø—Ç—É—î–º–æ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ –ø—ñ–¥ –ø–æ—Ç—Ä–µ–±–∏ —É—á–∞—Å–Ω–∏–∫—ñ–≤.\n"
                                  "ü§ù –°—Ç–∞–Ω–µ—à —á–∞—Å—Ç–∏–Ω–æ—é —Å–ø—ñ–ª—å–Ω–æ—Ç–∏ –æ–¥–Ω–æ–¥—É–º—Ü—ñ–≤.\n"
                                  "\n<b>–©–æ —Ä–æ–±–∏—Ç–∏?</b>\n"
                                  "\n1Ô∏è‚É£ <b>–ó–∞–ø–æ–≤–Ω–∏ –∞–Ω–∫–µ—Ç—É</b> ‚Äì –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ.\n"
                                  "2Ô∏è‚É£ <b>–ü–æ–≤–µ—Ä–Ω–∏—Å—è —Ç–∞ –Ω–∞—Ç–∏—Å–Ω–∏ '–Ø –∑–∞–ø–æ–≤–Ω–∏–≤/–ª–∞ –∞–Ω–∫–µ—Ç—É'</b>, —â–æ–± –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –æ–ø–ª–∞—Ç–∏.\n"
                                  "\nüöÄ –¢–∏ –≥–æ—Ç–æ–≤–∏–π? –¢–æ–¥—ñ –≤–ø–µ—Ä–µ–¥!\n",
                                  reply_markup=sm.form_inline_markup)


@dp.callback_query(F.data == 'go_back_form')
async def go_back_form(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer("üéØ –¢–∏ –º–∞–π–∂–µ –Ω–∞ —Å—Ç–∞—Ä—Ç—ñ! –ó–∞–ª–∏—à–∏–≤—Å—è –≤–∞–∂–ª–∏–≤–∏–π –∫—Ä–æ–∫ ‚Äì –∑–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É."
                                  " –¶–µ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∞ —É–º–æ–≤–∞ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —Ç–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ –∫—É—Ä—Å—É.\n"
                                  "\n–ê–Ω–∫–µ—Ç–∞ –¥–æ–ø–æ–º–æ–∂–µ –Ω–∞–º –∫—Ä–∞—â–µ –∑—Ä–æ–∑—É–º—ñ—Ç–∏ —Ç–≤–æ—ó –ø–æ—Ç—Ä–µ–±–∏ —Ç–∞ –∑—Ä–æ–±–∏—Ç–∏ –Ω–∞–≤—á–∞–Ω–Ω—è –±—ñ–ª—å—à —Ü—ñ–Ω–Ω–∏–º"
                                  " –¥–ª—è —Ç–µ–±–µ. –ê –¥–ª—è —Ç–µ–±–µ ‚Äì —Ü–µ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å —É—Å–≤—ñ–¥–æ–º–∏—Ç–∏ —Å–≤–æ—ó —Ü—ñ–ª—ñ —Ç–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏"
                                  " –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫–æ—Ä–∏—Å—Ç—å\n"
                                  "\n<b>–ß–æ–º—É —Ü–µ –≤–∞–∂–ª–∏–≤–æ?</b>\n"
                                  "\nüìù –ß—ñ—Ç–∫—ñ—à–µ –≤–∏–∑–Ω–∞—á–∏—à —Å–≤–æ—ó –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤—ñ–¥ –∫—É—Ä—Å—É.\n"
                                  "üìä –ú–∏ –∞–¥–∞–ø—Ç—É—î–º–æ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ –ø—ñ–¥ –ø–æ—Ç—Ä–µ–±–∏ —É—á–∞—Å–Ω–∏–∫—ñ–≤.\n"
                                  "ü§ù –°—Ç–∞–Ω–µ—à —á–∞—Å—Ç–∏–Ω–æ—é —Å–ø—ñ–ª—å–Ω–æ—Ç–∏ –æ–¥–Ω–æ–¥—É–º—Ü—ñ–≤.\n"
                                  "\n<b>–©–æ —Ä–æ–±–∏—Ç–∏?</b>\n"
                                  "\n1Ô∏è‚É£ <b>–ó–∞–ø–æ–≤–Ω–∏ –∞–Ω–∫–µ—Ç—É</b> ‚Äì –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ.\n"
                                  "2Ô∏è‚É£ <b>–ü–æ–≤–µ—Ä–Ω–∏—Å—è —Ç–∞ –Ω–∞—Ç–∏—Å–Ω–∏ '–Ø –∑–∞–ø–æ–≤–Ω–∏–≤/–ª–∞ –∞–Ω–∫–µ—Ç—É'</b>, —â–æ–± –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –æ–ø–ª–∞—Ç–∏.\n"
                                  "\nüöÄ –¢–∏ –≥–æ—Ç–æ–≤–∏–π? –¢–æ–¥—ñ –≤–ø–µ—Ä–µ–¥!\n",
                                  reply_markup=sm.accept_inline_markup)


@dp.callback_query(F.data == 'to_pay')
async def front_of_menu(callback: CallbackQuery):

    # –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
    video_id = 'BAACAgIAAxkBAAIGomfRWLc0u1m1cDUngcSI2BFFGhCaAALYagACX0WISsgyvOR_ge0ONgQ'
    await callback.answer()
    user = await AsyncDB.get_user(callback.message.chat.id)
    await callback.message.answer_video(video_id,
                                        caption="üéâ <b>–í—ñ—Ç–∞—î–º–æ –Ω–∞ –Ω–∞–≤—á–∞–Ω–Ω—ñ!</b>\n"
                                                "\n–¢–∏ –∑—Ä–æ–±–∏–≤ –≤–∞–∂–ª–∏–≤–∏–π –∫—Ä–æ–∫, —ñ –º–∏ —Ä–∞–¥—ñ –≤—ñ—Ç–∞—Ç–∏ —Ç–µ–±–µ —É —Ü—ñ–π –ø–æ–¥–æ—Ä–æ–∂—ñ!"
                                                " –í—ñ–¥–∫—Ä–∏—Ç—ñ—Å—Ç—å –¥–æ –Ω–æ–≤–æ–≥–æ ‚Äì —Ü–µ –∫–ª—é—á –¥–æ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è. –¶–µ–π –∫—É—Ä—Å –¥–æ–ø–æ–º–æ–∂–µ —Ç–æ–±—ñ"
                                                " —Ä–æ–∑–∫—Ä–∏—Ç–∏ —Å–≤–æ—î –ø–æ–∫–ª–∏–∫–∞–Ω–Ω—è —Ç–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –∑–Ω–∞–Ω–Ω—è –¥–ª—è —Å–ª—É–∂—ñ–Ω–Ω—è."
                                                "\n\n<b>üîπ –Ø–∫ –æ—Ç—Ä–∏–º–∞—Ç–∏ –º–∞–∫—Å–∏–º—É–º?</b> "
                                                "\n\n‚úÖ –ü–æ—Å—Ç–∞–≤ —Å–æ–±—ñ –∑–∞ –º–µ—Ç—É –≤–∑—è—Ç–∏ –≤—Å–µ, —â–æ –º–æ–∂–µ –¥–∞—Ç–∏ —Ü–µ –Ω–∞–≤—á–∞–Ω–Ω—è."
                                                "\n‚úÖ –ü—Ä–æ–π–¥–∏ –≤—Å—ñ 6 –º–æ–¥—É–ª—ñ–≤ —É –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ —Ç–µ—Ä–º—ñ–Ω–∏ ‚Äì –∫–æ–∂–µ–Ω –º–æ–¥—É–ª—å —Ç—Ä–∏–≤–∞—î"
                                                " 2 —Ç–∏–∂–Ω—ñ."
                                                "\n‚úÖ –ë—É–¥—å –∞–∫—Ç–∏–≤–Ω–∏–º —É –Ω–∞–≤—á–∞–Ω–Ω—ñ, —Å—Ç–∞–≤ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è —Ç–∞ –≤–∑–∞—î–º–æ–¥—ñ–π –∑—ñ"
                                                " —Å–ø—ñ–ª—å–Ω–æ—Ç–æ—é."
                                                "\n\nüí° <b>–î–æ—Å–ª—ñ–¥–∏ –º–µ–Ω—é, —â–æ–± –ª–µ–≥–∫–æ –æ—Ä—ñ—î–Ω—Ç—É–≤–∞—Ç–∏—Å—è —Ç–∞ —Ä—É—Ö–∞—Ç–∏—Å—è –≤–ø–µ—Ä–µ–¥!</b>"
                                                "\n\nüéØ <b>–¢–∏ –≥–æ—Ç–æ–≤–∏–π? –ü–æ—á–∏–Ω–∞–π –Ω–∞–≤—á–∞–Ω–Ω—è –≤–∂–µ –∑–∞—Ä–∞–∑!</b>",
                                        reply_markup=sm.main_menu(user.is_admin))


@dp.callback_query(F.data == 'check_registration_form')
async def check_registration_form(callback: CallbackQuery):
    tel_id = callback.message.chat.id
    user = await AsyncDB.get_user(tel_id)
    await bot.delete_message(tel_id, callback.message.message_id)
    if user:
        if user.phone and user.region and user.denomination and user.role:
            if len(user.phone) != 0 and len(user.region) != 0 and len(user.denomination) != 0 and len(user.role) != 0:
                payment_number = await AsyncDB.get_user_payments(tel_id)
                wfp = WayForPay(key=W4P_KEY, domain_name=DOMAIN_NAME)
                res = wfp.create_invoice(
                    merchantAccount=MERCHANT_ACCOUNT,
                    merchantAuthType='SimpleSignature',
                    amount=f'{AMOUNT}',
                    currency='UAH',
                    productNames=["–û–ø–ª–∞—Ç–∞ –∑–∞ –∫—É—Ä—Å M4"],
                    productPrices=[AMOUNT],
                    productCounts=[1],
                    orderID=f"M4-{tel_id}-{0 if payment_number is None else payment_number + 1}"
                )
                if res.reason == 'Duplicate Order ID':
                    res = wfp.create_invoice(
                        merchantAccount=MERCHANT_ACCOUNT,
                        merchantAuthType='SimpleSignature',
                        amount=f'{AMOUNT}',
                        currency='UAH',
                        productNames=["–û–ø–ª–∞—Ç–∞ –∑–∞ –∫—É—Ä—Å M4"],
                        productPrices=[AMOUNT],
                        productCounts=[1],
                        orderID=f"M4-{tel_id}-{0 if payment_number is None else payment_number + 2}"
                    )
                link = res.invoiceUrl
                if link is not None:
                    await bot.send_message(tel_id, pay_text, reply_markup=sm.pay_keyb(link))
                    return

    await bot.send_message(tel_id, not_registered_yet, reply_markup=sm.form_inline_markup)


@dp.message(F.text == "–ö–æ—Ä–∏—Å–Ω–µ")
async def people(message: Message):
    inline_button = [
        [
            InlineKeyboardButton(text=f"M4Ukraine", url="https://choko.link/M4Ukraine")
        ]
    ]
    inline_keyboard = InlineKeyboardMarkup(inline_keyboard=inline_button)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    await message.answer("üìå <b>–ö–æ—Ä–∏—Å–Ω–µ ‚Äì —Ä–æ–∑–≤–∏–≤–∞–π—Å—è —Ä–∞–∑–æ–º —ñ–∑ –Ω–∞–º–∏!</b> üöÄ"
                         "\n\n–•–æ—á–µ—à –±—ñ–ª—å—à–µ <b>–Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è, –∑–Ω–∞–Ω—å —ñ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏</b>? –ú–∏ –∑—ñ–±—Ä–∞–ª–∏ –≤—Å–µ,"
                         " —â–æ –¥–æ–ø–æ–º–æ–∂–µ —Ç–æ–±—ñ <b>–∑—Ä–æ—Å—Ç–∞—Ç–∏ —Ç–∞ –≤–ø–µ–≤–Ω–µ–Ω–æ —Ä—É—Ö–∞—Ç–∏—Å—è —É –ø–æ–∫–ª–∏–∫–∞–Ω–Ω—ñ.</b>\n"
                         "\nüå± <b>–©–æ —Ç—É—Ç —î?</b>"
                         "\n üîπ <b>YouTube</b> ‚Äì –ø—Ä–∞–∫—Ç–∏—á–Ω—ñ –≤—ñ–¥–µ–æ –ø—Ä–æ –∑–∞—Å–Ω—É–≤–∞–Ω–Ω—è —Ü–µ—Ä–∫–æ–≤."
                         "\n üîπ <b>Pastory</b> ‚Äì —ñ–Ω—Ç–µ—Ä–≤‚Äô—é –∑ –ø–∞—Å—Ç–æ—Ä–∞–º–∏ –ø—Ä–æ —ó—Ö–Ω—ñ–π —à–ª—è—Ö —ñ –≤–∏–∫–ª–∏–∫–∏."
                         "\n üîπ <b>Instagram</b> ‚Äì –º–æ—Ç–∏–≤–∞—Ü—ñ—è, –Ω–æ–≤–∏–Ω–∏ —Ç–∞ —Ä–µ–∞–ª—å–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó."
                         "\n\nüì¢ <b>–ü—Ä–∏—î–¥–Ω—É–π—Å—è —Ç–∞ –∑—Ä–æ—Å—Ç–∞–π!</b> üî•"
                         "\n\nüîó <b>–£—Å—ñ —Ä–µ—Å—É—Ä—Å–∏ —Ç—É—Ç:</b>",
                         reply_markup=inline_keyboard)


@dp.message(F.text == "–ü—ñ–¥—Ç—Ä–∏–º–∫–∞")
async def people(message: Message):
    inline_button = [
        [
            InlineKeyboardButton(text=f"–ü—ñ–¥—Ç—Ä–∏–º–∫–∞", url="https://t.me/m4_intensive")
        ]
    ]
    inline_keyboard = InlineKeyboardMarkup(inline_keyboard=inline_button)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    await message.answer("üí¨ <b>–ü–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞?</b>\n"
                         "\nüîç <b>–°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≥–ª—è–Ω—å '–ü–∏—Ç–∞–Ω–Ω—è-–≤—ñ–¥–ø–æ–≤—ñ–¥—ñ'</b> ‚Äì —Ç–∞–º —É–∂–µ —î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ"
                         " –Ω–∞ –Ω–∞–π–ø–æ—à–∏—Ä–µ–Ω—ñ—à—ñ –∑–∞–ø–∏—Ç–∏. –¶–µ –∑–µ–∫–æ–Ω–æ–º–∏—Ç—å —Ç–≤—ñ–π —á–∞—Å!"
                         "\n\nüëâ <b>–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –ø–∏—Ç–∞–Ω—å-–≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π:</b>"
                         " https://telegra.ph/Pitannya-v%D1%96dpov%D1%96d%D1%96-03-12"
                         "\n\n–Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–æ–≤ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ ‚Äì <b>–Ω–∞–ø–∏—à–∏ –Ω–∞–º.</b> üì© –ê–ª–µ –±—É–¥—å –ª–∞—Å–∫–∞, <b>–º–∞–π —Ç–µ—Ä–ø—ñ–Ω–Ω—è</b>,"
                         " –≤—ñ–¥–ø–æ–≤—ñ–¥—å –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ —Ç—Ä–æ—Ö–∏ —á–∞—Å—É."
                         "üí¨ <b>–ó–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –ø—ñ–¥—Ç—Ä–∏–º–∫—É:</b>",
                         reply_markup=inline_keyboard)


@dp.message(F.text == "–ü—É–±–ª—ñ—á–Ω–∏–π –¥–æ–≥–æ–≤—ñ—Ä")
async def people(message: Message):
    inline_button = [
        [
            InlineKeyboardButton(text=f"–¢–µ–ª–µ–≥—Ä–∞—Ñ",
                                 url="https://telegra.ph/Publ%D1%96chna-oferta-na-koristuvannya-poslugami-chat-bota-z-navchalnimi-kursami-02-27")
        ]
    ]
    inline_keyboard = InlineKeyboardMarkup(inline_keyboard=inline_button)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    await message.answer("üìÑ <b>–ü—É–±–ª—ñ—á–Ω–∏–π –¥–æ–≥–æ–≤—ñ—Ä ‚Äì –∑–Ω–∞–π —Å–≤–æ—ó –ø—Ä–∞–≤–∞!</b>\n"
                         "\n–¢–∏ –≤–∂–µ –ø—Ä–æ—Ö–æ–¥–∏—à –Ω–∞–≤—á–∞–Ω–Ω—è, –∞ –æ—Ç–∂–µ, –ø–æ–≥–æ–¥–∏–≤—Å—è –∑ –π–æ–≥–æ —É–º–æ–≤–∞–º–∏. üìú –£ –¥–æ–≥–æ–≤–æ—Ä—ñ –≤–∫–∞–∑–∞–Ω–æ"
                         " <b>—Ç–≤–æ—ó –ø—Ä–∞–≤–∞, –æ–±–æ–≤‚Äô—è–∑–∫–∏, –ø—Ä–∞–≤–∏–ª–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è –º–∞—Ç–µ—Ä—ñ–∞–ª–∞–º–∏ —Ç–∞ –ø–æ–ª—ñ—Ç–∏–∫—É"
                         " –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∫–æ—à—Ç—ñ–≤.</b>"
                         "\n\n‚öñ <b>–û—Å–Ω–æ–≤–Ω–µ:</b>"
                         "\n ‚úÖ –Ø–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –Ω–∞–≤—á–∞–ª—å–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏."
                         "\n ‚úÖ –¢–≤–æ—ó –ø—Ä–∞–≤–∞ —Ç–∞ –æ–±–æ–≤‚Äô—è–∑–∫–∏."
                         "\n ‚úÖ –£–º–æ–≤–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∫–æ—à—Ç—ñ–≤."
                         "\n\nüìå <b>–û–∑–Ω–∞–π–æ–º—Å—è –∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–º, —â–æ–± —É—Å–µ –±—É–ª–æ –∑—Ä–æ–∑—É–º—ñ–ª–æ!</b>"
                         "\n\nüëâ <b>–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –ø—É–±–ª—ñ—á–Ω–æ–≥–æ –¥–æ–≥–æ–≤–æ—Ä—É:</b>",
                         reply_markup=inline_keyboard)


@dp.message(F.text == "–°–ø—ñ–ª—å–Ω–æ—Ç–∞")
async def people(message: Message):
    inline_button = [
        [
            InlineKeyboardButton(text=f"–°–ø—ñ–ª—å–Ω–æ—Ç–∞", url="https://t.me/+oaL0u9KoXnVmNjhi")
        ]
    ]
    inline_keyboard = InlineKeyboardMarkup(inline_keyboard=inline_button)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    await message.answer("ü§ù <b>–°–ø—ñ–ª—å–Ω–æ—Ç–∞ ‚Äì —Ç–≤–æ—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ —Ç–∞ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è!</b> üöÄ"
                         "\n\n–¢–∏ –Ω–µ –æ–¥–∏–Ω —É —Å–≤–æ—î–º—É –ø–æ–∫–ª–∏–∫–∞–Ω–Ω—ñ! –£ –∑–∞–∫—Ä–∏—Ç—ñ–π <b>–æ–Ω–ª–∞–π–Ω-—Å–ø—ñ–ª—å–Ω–æ—Ç—ñ</b> —Ç–∏ "
                         "–∑–Ω–∞–π–¥–µ—à <b>–ø—ñ–¥—Ç—Ä–∏–º–∫—É, –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è —Ç–∞ –µ–∫—Å–∫–ª—é–∑–∏–≤–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏,</b> —è–∫—ñ –¥–æ–ø–æ–º–æ–∂—É—Ç—å —Ç–æ–±—ñ —Ä–æ—Å—Ç–∏."
                         "\n\nüî• <b>–©–æ —Ç—É—Ç —î?</b>"
                         "\n ‚úÖ –û–¥–Ω–æ–¥—É–º—Ü—ñ, —è–∫—ñ —Ä–æ–∑—É–º—ñ—é—Ç—å —Ç–≤—ñ–π —à–ª—è—Ö."
                         "\n ‚úÖ –ú–∞—Ç–µ—Ä—ñ–∞–ª–∏, —è–∫–∏—Ö –Ω–µ–º–∞—î –≤ –∫—É—Ä—Å—ñ."
                         "\n ‚úÖ –ü–æ—Ä–∞–¥–∏ —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –≤–∞–∂–ª–∏–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è."
                         "\n ‚úÖ –ú—ñ—Å—Ü–µ, –¥–µ –º–æ–∂–Ω–∞ –¥—ñ–ª–∏—Ç–∏—Å—è –¥–æ—Å–≤—ñ–¥–æ–º, –≤–∏–∫–ª–∏–∫–∞–º–∏ —Ç–∞ –ø–µ—Ä–µ–º–æ–≥–∞–º–∏."
                         "\n\nüì¢ <b>–ü—Ä–∏—î–¥–Ω—É–π—Å—è —Ç–∞ –∑—Ä–æ—Å—Ç–∞–π —Ä–∞–∑–æ–º —ñ–∑ –Ω–∞–º–∏!</b> üí™‚ú®"
                         "\n üîó <b>–î–æ–ª—É—á–∞–π—Å—è –¥–æ —Å–ø—ñ–ª—å–Ω–æ—Ç–∏:</b>",
                         reply_markup=inline_keyboard)


@dp.message(F.text == "–ü–∏—Ç–∞–Ω–Ω—è-–≤—ñ–¥–ø–æ–≤—ñ–¥—ñ")
async def people(message: Message):
    inline_button = [
        [
            InlineKeyboardButton(text=f"–ü–∏—Ç–∞–Ω–Ω—è-–≤—ñ–¥–ø–æ–≤—ñ–¥—ñ üìå",
                                 url="https://telegra.ph/Pitannya-v%D1%96dpov%D1%96d%D1%96-03-12")
        ]
    ]
    inline_keyboard = InlineKeyboardMarkup(inline_keyboard=inline_button)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    await message.answer("‚ùì <b>–ü–∏—Ç–∞–Ω–Ω—è —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ ‚Äì –∑–Ω–∞–π–¥–∏ —Ä—ñ—à–µ–Ω–Ω—è —à–≤–∏–¥–∫–æ!</b>"
                         "\n\n–ü–µ—Ä–µ–¥ —Ç–∏–º —è–∫ –ø–∏—Å–∞—Ç–∏ –≤ –ø—ñ–¥—Ç—Ä–∏–º–∫—É, <b>–ø–µ—Ä–µ–≥–ª—è–Ω—å —Ü–µ–π —Ä–æ–∑–¥—ñ–ª</b> ‚Äì –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É–∂–µ –º–æ–∂–µ"
                         " –±—É—Ç–∏ —Ç—É—Ç! \nüîç –ú–∏ –∑—ñ–±—Ä–∞–ª–∏ –Ω–∞–π–ø–æ—à–∏—Ä–µ–Ω—ñ—à—ñ –∑–∞–ø–∏—Ç–∏, —â–æ–± —Ç–∏ –º—ñ–≥ <b>–æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä—ñ—à–µ–Ω–Ω—è –±–µ–∑"
                         " –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è.</b>"
                         "\n\n‚ö° <b>–ß–æ–º—É —Ü–µ –∑—Ä—É—á–Ω–æ?</b>"
                         "\n ‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å –æ–¥—Ä–∞–∑—É, –±–µ–∑ –ª–∏—Å—Ç—É–≤–∞–Ω–Ω—è."
                         "\n ‚úÖ –í—á–∏—à—Å—è —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ —Ä–æ–∑–±–∏—Ä–∞—Ç–∏—Å—è –∑ –ø–∏—Ç–∞–Ω–Ω—è–º–∏."
                         "\n ‚úÖ –†–æ–∑–¥—ñ–ª –æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è ‚Äì –º–æ–∂–ª–∏–≤–æ, —Ç–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è —Å–∫–æ—Ä–æ –∑‚Äô—è–≤–∏—Ç—å—Å—è —Ç—É—Ç."
                         "\n\nüìå <b>–ü–µ—Ä–µ–π—Ç–∏ –¥–æ –ø–∏—Ç–∞–Ω—å-–≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π:</b> "
                         "\n\n–Ø–∫—â–æ —Ä—ñ—à–µ–Ω–Ω—è —â–µ –Ω–µ–º–∞—î ‚Äì –ø–æ–≤–µ—Ä—Ç–∞–π—Å—è –ø—ñ–∑–Ω—ñ—à–µ, –º–∏ –Ω–∞–¥ —Ü–∏–º –ø—Ä–∞—Ü—é—î–º–æ! üöÄ",
                         reply_markup=inline_keyboard)


@dp.message(F.text == "–ù–∞–≤—á–∞–Ω–Ω—è üìö")
async def study(message: Message):
    user = await AsyncDB.get_user(message.chat.id)

    if not user:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return
    if await check_user(message.chat.id):
        keyboard = sm.get_module_keyboard(getattr(user, "current_module", 1) or 1)
        await message.answer("–û–±–µ—Ä—ñ—Ç—å –º–æ–¥—É–ª—å:", reply_markup=keyboard)


@dp.message(F.text == '–Ø–∫ –Ω–∞–≤—á–∞—Ç–∏—Å—è?')
async def study_how(message: Message):

    await message.answer(how_learn,
                         reply_markup=sm.module_back_buttons_keyboard)


@dp.message(lambda message: message.text.startswith('–ú–æ–¥—É–ª—å'))
async def handle_module(message: Message):
    tel_id = message.chat.id
    if await check_user(message.chat.id):
        module_number = int(message.text.split(" ")[1])  #–ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –º–æ–¥—É–ª—è

        await AsyncDB.update_user_progress_module(tel_id, module_number)

        current_module = await AsyncDB.get_user_current_module(tel_id)
        await AsyncDB.check_module_data(tel_id, module_number)

        select_module = await AsyncDB.get_user_progress_current_module(tel_id)
        select_lesson = await AsyncDB.get_user_progress_current_lesson(tel_id)

        if select_module == current_module:
            # await AsyncDB.update_current_lesson(tel_id, 1)
            current_lesson = await AsyncDB.get_current_lesson(tel_id)
            lesson_data = await get_lesson_data_json(current_module,  current_lesson)
            # print("lesson_data:", lesson_data)
            video_data = lesson_data["video_module"]
            # –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥–µ–æ –ø–æ —Ç–µ–∫—É—â–µ–º—É –∏–Ω–¥–µ–∫—Å—É
            video_to_send = video_data[0]
            await message.answer(f"{video_to_send['title1']}")
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î –ø–æ telegram_id
            user = await AsyncDB.get_user_by_telegram_id(message.chat.id)

            if user:
                user = await AsyncDB.get_user(message.chat.id)

                if not user:
                    await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
                    return

                keyboard = get_lesson_keyboard(getattr(user, "current_lesson", 1))
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫:", reply_markup=keyboard)
            else:
                await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        else:
            user = await AsyncDB.get_user_by_telegram_id(message.chat.id)

            if user:
                await AsyncDB.update_current_lesson(tel_id, 6)

                user = await AsyncDB.get_user(message.chat.id)

                if not user:
                    await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
                    return

                keyboard = get_lesson_keyboard(getattr(user, "current_lesson", 1))
                await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫:", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–£—Ä–æ–∫"
@dp.message(lambda message: message.text.startswith('–£—Ä–æ–∫'))
async def handle_lesson(message: Message):
    tel_id = message.chat.id
    if await check_user(message.chat.id):
        lesson_number = int(message.text.split(" ")[1])  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞
        module_number = await AsyncDB.get_user_progress_current_module(tel_id)
        current_module = await AsyncDB.get_user_current_module(tel_id)
        current_lesson = await AsyncDB.get_current_lesson(tel_id)  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await update_current_video_index_0(module_number, lesson_number)
        await update_current_test_index_0(module_number, lesson_number)
        current_video_index = await get_current_video_index(module_number, lesson_number)  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –≤–∏–¥–µ–æ
        curent_test_index = await get_current_test_index(module_number, lesson_number)


        test_scores = await AsyncDB.get_all_test_scores(tel_id, current_module, current_lesson)
        print(test_scores)  # –ù–∞–ø—Ä–∏–º–µ—Ä: [None, 85, 90]  (–ø–µ—Ä–≤—ã–π —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω)

        unfinished_tests = any(score is None for score in test_scores)  # True, –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è –ø–µ—Ä–µ–π—Ç–∏ –∫ —É—Ä–æ–∫—É, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–º—É —É—Ä–æ–∫—É
        if module_number == current_module and lesson_number == current_lesson and unfinished_tests == True:
            await AsyncDB.update_user_progress_lesson(tel_id, lesson_number)

            lesson_data = await get_lesson_data_json(module_number, lesson_number)

            if lesson_data:
                if "video" in lesson_data and len(lesson_data["video"]) > 0:
                    video_data = lesson_data["video"]
                    # –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥–µ–æ –ø–æ —Ç–µ–∫—É—â–µ–º—É –∏–Ω–¥–µ–∫—Å—É
                    video_to_send = video_data[current_video_index]
                    first_video_id = video_to_send.get("video_id")
                    if first_video_id:
                        # –°–æ–∑–¥–∞—ë–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Ç–µ—Å—Ç
                        test_data = lesson_data.get("tests", [])
                        if test_data:
                            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Å—Å—ã–ª–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
                            test_url = test_data[current_video_index]["url"]
                            test_title = test_data[curent_test_index]["test_id"]
                            inline_button = InlineKeyboardButton(text=f"{test_title}",
                                                                 url=test_url)
                            inline_button2 = InlineKeyboardButton(text=f"–î–∞–ª—ñ ‚û°Ô∏è",
                                                                  callback_data="next_lesson_part")
                            inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[[inline_button], [inline_button2]])

                            # –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–ª–∞–π-–∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
                            # next_button = KeyboardButton(text="–î–∞–ª—ñ")
                            # lesson_keyboard_reply = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[[next_button]])

                            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –≤–∏–¥–µ–æ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–∑–∞
                            next_video_index = current_video_index + 1
                            await update_current_video_index(module_number, lesson_number, next_video_index)
                            await update_current_test_index(module_number, lesson_number, next_video_index)

                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Å –∫–Ω–æ–ø–∫–æ–π
                            await message.answer_video(
                                video=first_video_id,
                                caption=f'{lesson_data.get("title")}\n \n {video_to_send["title"]}',
                                reply_markup=inline_keyboard
                            )
                            # await message.answer(f"{video_to_send['title']}",
                            #                      reply_markup=lesson_keyboard_reply)

                    else:
                        await message.answer("ID –≤–∏–¥–µ–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö.")
                else:
                    await message.answer("–í —É—Ä–æ–∫–µ –Ω–µ—Ç –≤–∏–¥–µ–æ.")
            else:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ–± —É—Ä–æ–∫–µ.")
        else:

            number = 0
            lesson_data = await get_lesson_data_json(module_number, lesson_number)
            await message.answer(f'{lesson_data.get("title")}')

            while number < len(lesson_data['video']):
                video_data = lesson_data["video"]
                # –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥–µ–æ –ø–æ —Ç–µ–∫—É—â–µ–º—É –∏–Ω–¥–µ–∫—Å—É
                video_to_send = video_data[number]
                video_id = video_to_send.get("video_id")

                await message.answer_video(video_id,
                                           caption=f"{video_to_send['title']}")
                number += 1
            else:
                await message.answer("–û—Å—å —É—Å—ñ –≤—ñ–¥–µ–æ –∑ —Ü—å–æ–≥–æ —É—Ä–æ–∫—É.",
                                     reply_markup=sm.lesson_back_buttons_keyboard)


@dp.callback_query(F.data == 'next_lesson_part')
async def front_of_menu(callback: CallbackQuery):
    tel_id = callback.message.chat.id
    if await check_user(tel_id):
        _up_ = await AsyncDB.get_user_progress(tel_id)
        up = dict(json.loads(_up_.progress))
        module_number = _up_.select_module
        lesson_number = _up_.select_lesson
        current_video_index = await get_current_video_index(module_number, lesson_number)
        curent_test_index = await get_current_test_index(module_number, lesson_number)
        test_result = up[f"module{module_number}"][f"lesson{lesson_number}"][str(current_video_index)]
        if test_result is not None:
            if int(test_result) < 80:
                lesson_data = await get_lesson_data_json(module_number, lesson_number)
                test_data = lesson_data.get("tests", [])
                test_url = test_data[current_video_index]["url"]
                test_title = test_data[curent_test_index]["test_id"]
                inline_button = InlineKeyboardButton(text=f"{test_title}",
                                                     url=test_url)
                inline_button2 = InlineKeyboardButton(text=f"–î–∞–ª—ñ ‚û°Ô∏è",
                                                      callback_data="next_lesson_part")
                inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[[inline_button], [inline_button2]])
                await bot.send_message(tel_id, failed_test, reply_markup=inline_keyboard)
            else:
                await handle_next_button(callback.message)  # –ø–µ—Ä–µ—Ö–æ–¥ –¥–∞–ª—å—à–µ
        else:
            user = await AsyncDB.get_user(tel_id)
            text = test_not_passed.replace('%s', user.email)
            await bot.send_message(tel_id, text=text)
            return


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î–∞–ª—ñ"
async def handle_next_button(message: Message):
    tel_id = message.chat.id
    if await check_user(tel_id):
        module_number = await AsyncDB.get_user_progress_current_module(tel_id)
        lesson_number = await AsyncDB.get_user_progress_current_lesson(tel_id)
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞ –∏–∑ JSON
        lesson_data = await get_lesson_data_json(module_number, lesson_number)
        print(lesson_data)
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –≤–∏–¥–µ–æ
        current_video_index = await get_current_video_index(module_number, lesson_number)
        curent_test_index = await get_current_test_index(module_number, lesson_number)

        if lesson_data:
            print(current_video_index, len(lesson_data['video']))
            if current_video_index < len(lesson_data['video']):
                video_data = lesson_data["video"]
                # –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥–µ–æ –ø–æ —Ç–µ–∫—É—â–µ–º—É –∏–Ω–¥–µ–∫—Å—É
                video_to_send = video_data[current_video_index]
                first_video_id = video_to_send.get("video_id")
                if first_video_id:
                    # –°–æ–∑–¥–∞—ë–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Ç–µ—Å—Ç
                    test_data = lesson_data.get("tests", [])
                    if test_data:
                        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Å—Å—ã–ª–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
                        test_url = test_data[current_video_index]["url"]
                        test_title = test_data[curent_test_index]["test_id"]
                        inline_button = InlineKeyboardButton(text=f"{test_title}",
                                                             url=test_url)
                        inline_button2 = InlineKeyboardButton(text=f"–î–∞–ª—ñ ‚û°Ô∏è",
                                                              callback_data="next_lesson_part")
                        inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[[inline_button], [inline_button2]])

                        # –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–ª–∞–π-–∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
                        # next_button = KeyboardButton(text="–î–∞–ª—ñ")
                        # lesson_keyboard_reply = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[[next_button]])

                        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –≤–∏–¥–µ–æ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–∑–∞
                        next_video_index = current_video_index + 1
                        await update_current_video_index(module_number, lesson_number, next_video_index)
                        await update_current_test_index(module_number, lesson_number, next_video_index)

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Å –∫–Ω–æ–ø–∫–æ–π
                        await message.answer_video(
                            video=first_video_id,
                            caption=f"{video_to_send['title']}",
                            reply_markup=inline_keyboard
                        )
                        # await message.answer(f"{video_to_send['title']}",
                        #                      reply_markup=lesson_keyboard_reply)
                else:
                    await message.answer("–í–∏ –º–æ–ª–æ–¥—Ü—ñ –ø—Ä–∏—Å—Ç—É–ø–∞–π—Ç–µ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —É—Ä–æ–∫—É",
                                         reply_markup=sm.get_next_lesson_keyboard())
            else:
                current_module = await AsyncDB.get_user_current_module(tel_id)
                current_lesson = await AsyncDB.get_current_lesson(tel_id)
                if current_lesson == 6:
                    lesson_data = await get_lesson_data_json(current_module, current_lesson)
                    video_data = lesson_data["video_module"]
                    # –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥–µ–æ –ø–æ —Ç–µ–∫—É—â–µ–º—É –∏–Ω–¥–µ–∫—Å—É
                    video_to_send = video_data[0]
                    video_id = video_to_send.get("video_id")
                    await message.answer_video(video_id,
                                               caption=f"{video_to_send['title2']}",
                                               reply_markup=sm.next_module_markup)
                else:
                    await message.answer("–í–∏ –º–æ–ª–æ–¥—Ü—ñ –ø—Ä–∏—Å—Ç—É–ø–∞–π—Ç–µ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —É—Ä–æ–∫—É",
                                         reply_markup=sm.get_next_lesson_keyboard())
        else:
            current_module = await AsyncDB.get_user_current_module(tel_id)
            current_lesson = await AsyncDB.get_current_lesson(tel_id)
            if current_lesson == 6:
                lesson_data = await get_lesson_data_json(current_module, current_lesson)
                video_data = lesson_data["video_module"]
                # –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥–µ–æ –ø–æ —Ç–µ–∫—É—â–µ–º—É –∏–Ω–¥–µ–∫—Å—É
                video_to_send = video_data[0]
                video_id = video_to_send.get("video_id")
                await message.answer_video(video_id,
                                           caption=f"{video_to_send['title2']}",
                                           reply_markup=sm.next_module_markup)


@dp.message(lambda message: message.text == "–ù–∞—Å—Ç—É–ø–Ω–∏–π —É—Ä–æ–∫")
async def handle_next_lesson(message: Message):
    tel_id = message.chat.id
    if await check_user(tel_id):
        current_lesson = await AsyncDB.get_current_lesson(tel_id)
        next_lesson = current_lesson + 1

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —É—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –æ–Ω —É–∂–µ –ø—Ä–æ—à–µ–ª
        if current_lesson is not None and current_lesson <= 6:  # –ù–∞–ø—Ä–∏–º–µ—Ä, —É –Ω–∞—Å 6 —É—Ä–æ–∫–æ–≤
            await AsyncDB.update_current_lesson(tel_id, next_lesson)
            await message.answer(f"–í–∏ –ø–µ—Ä–µ–π—à–ª–∏ –Ω–∞ {next_lesson}-–π —É—Ä–æ–∫. –£—Å–ø—ñ—Ö—ñ–≤ —É –Ω–∞–≤—á–∞–Ω–Ω—ñ!")

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª–µ–¥—É—é—â–∏—Ö —É—Ä–æ–∫–æ–≤
            user = await AsyncDB.get_user_by_telegram_id(tel_id)
            if user:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–≤—ã–º —É—Ä–æ–∫–æ–º
                keyboard = get_lesson_keyboard(next_lesson)
                await message.answer("–û–±–µ—Ä—ñ—Ç—å —É—Ä–æ–∫:", reply_markup=keyboard)
            else:
                await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        else:
            await message.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—Å–µ —É—Ä–æ–∫–∏ —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è!")


@dp.message(F.text == "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ —É—Ä–æ–∫—ñ–≤")
async def back_to_lessons(message: Message):
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î –ø–æ telegram_id
    user = await AsyncDB.get_user_by_telegram_id(message.chat.id)

    if user:
        user = await AsyncDB.get_user(message.chat.id)

        if not user:
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
            return

        keyboard = get_lesson_keyboard(getattr(user, "current_lesson", 1))
        await message.answer("–û–±–µ—Ä—ñ—Ç—å —É—Ä–æ–∫:", reply_markup=keyboard)
    else:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")


@dp.message(F.text == "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
async def back_to_lessons(message: Message):
    video_id = 'BAACAgIAAxkBAAIGomfRWLc0u1m1cDUngcSI2BFFGhCaAALYagACX0WISsgyvOR_ge0ONgQ'
    user = await AsyncDB.get_user(message.chat.id)
    await message.answer_video(video_id,
                               caption="üéâ <b>–í—ñ—Ç–∞—î–º–æ –Ω–∞ –Ω–∞–≤—á–∞–Ω–Ω—ñ!</b>\n"
                                 "\n–¢–∏ –∑—Ä–æ–±–∏–≤ –≤–∞–∂–ª–∏–≤–∏–π –∫—Ä–æ–∫, —ñ –º–∏ —Ä–∞–¥—ñ –≤—ñ—Ç–∞—Ç–∏ —Ç–µ–±–µ —É —Ü—ñ–π –ø–æ–¥–æ—Ä–æ–∂—ñ! –í—ñ–¥–∫—Ä–∏—Ç—ñ—Å—Ç—å –¥–æ –Ω–æ–≤–æ–≥–æ ‚Äì —Ü–µ –∫–ª—é—á –¥–æ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è. –¶–µ–π –∫—É—Ä—Å –¥–æ–ø–æ–º–æ–∂–µ —Ç–æ–±—ñ —Ä–æ–∑–∫—Ä–∏—Ç–∏ —Å–≤–æ—î –ø–æ–∫–ª–∏–∫–∞–Ω–Ω—è —Ç–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –∑–Ω–∞–Ω–Ω—è –¥–ª—è —Å–ª—É–∂—ñ–Ω–Ω—è."
                                 "\n\n<b>üîπ –Ø–∫ –æ—Ç—Ä–∏–º–∞—Ç–∏ –º–∞–∫—Å–∏–º—É–º?</b> "
                                 "\n\n‚úÖ –ü–æ—Å—Ç–∞–≤ —Å–æ–±—ñ –∑–∞ –º–µ—Ç—É –≤–∑—è—Ç–∏ –≤—Å–µ, —â–æ –º–æ–∂–µ –¥–∞—Ç–∏ —Ü–µ –Ω–∞–≤—á–∞–Ω–Ω—è."
                                 "\n‚úÖ –ü—Ä–æ–π–¥–∏ –≤—Å—ñ 6 –º–æ–¥—É–ª—ñ–≤ —É –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ —Ç–µ—Ä–º—ñ–Ω–∏ ‚Äì –∫–æ–∂–µ–Ω –º–æ–¥—É–ª—å —Ç—Ä–∏–≤–∞—î 2 —Ç–∏–∂–Ω—ñ."
                                 "\n‚úÖ –ë—É–¥—å –∞–∫—Ç–∏–≤–Ω–∏–º —É –Ω–∞–≤—á–∞–Ω–Ω—ñ, —Å—Ç–∞–≤ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è —Ç–∞ –≤–∑–∞—î–º–æ–¥—ñ–π –∑—ñ —Å–ø—ñ–ª—å–Ω–æ—Ç–æ—é."
                                 "\n\nüí° <b>–î–æ—Å–ª—ñ–¥–∏ –º–µ–Ω—é, —â–æ–± –ª–µ–≥–∫–æ –æ—Ä—ñ—î–Ω—Ç—É–≤–∞—Ç–∏—Å—è —Ç–∞ —Ä—É—Ö–∞—Ç–∏—Å—è –≤–ø–µ—Ä–µ–¥!</b>"
                                 "\n\nüéØ <b>–¢–∏ –≥–æ—Ç–æ–≤–∏–π? –ü–æ—á–∏–Ω–∞–π –Ω–∞–≤—á–∞–Ω–Ω—è –≤–∂–µ –∑–∞—Ä–∞–∑!</b>",
                               reply_markup=sm.main_menu(user.is_admin))


@dp.message(F.text == "üîô–ú–æ–¥—É–ª—ñ")
async def back_to_lessons(message: Message):
    user = await AsyncDB.get_user(message.chat.id)
    keyboard = sm.get_module_keyboard(getattr(user, "current_module", 1))
    await message.answer("–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –º–æ–¥—É–ª—ñ–≤:", reply_markup=keyboard)


@dp.message(F.text == "–ù–∞—Å—Ç—É–ø–Ω–∏–π –º–æ–¥—É–ª—å")
async def next_module(message: Message):
    user = await AsyncDB.get_user(message.chat.id)
    tel_id = message.chat.id
    if await check_user(tel_id):
        if user.current_module == 6:
            current_module = await AsyncDB.get_user_current_module(tel_id)
            new_module = current_module + 1
            await AsyncDB.update_current_module(tel_id, new_module)
            video_id = "BAACAgIAAxkBAAIKr2fbLs92cFT61alfPcdV9KLzlNjVAAKtagAC7vzhSpe4NvrqYX35NgQ"
            await message.answer_video(video_id,
                                       caption="<b>–í—ñ—Ç–∞—î–º–æ!</b> üéâ "
                                               "\n\n–¢–∏ –ø—Ä–æ–π—à–æ–≤ –≤–∞–∂–ª–∏–≤–∏–π —à–ª—è—Ö, –æ—Ç—Ä–∏–º–∞–≤ –Ω–æ–≤—ñ –∑–Ω–∞–Ω–Ω—è —Ç–∞ –Ω–∞–≤–∏—á–∫–∏, —Ä–æ–∑–∫—Ä–∏–≤ —Å–≤–æ—î"
                                               " –ø–æ–∫–ª–∏–∫–∞–Ω–Ω—è —É –ë–æ–∂—ñ–π —ñ—Å—Ç–æ—Ä—ñ—ó. –ù–µ–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ç–æ–≥–æ, –∫–∏–º —Ç–∏ —Å–µ–±–µ –±–∞—á–∏—à ‚Äì <b>"
                                               "–∑–∞—Å–Ω–æ–≤–Ω–∏–∫–æ–º —Ü–µ—Ä–∫–≤–∏, —á–∞—Å—Ç–∏–Ω–æ—é –∫–æ–º–∞–Ω–¥–∏ –∞–±–æ –ª—ñ–¥–µ—Ä–æ–º —É —Å–≤–æ—ó–π –≥—Ä–æ–º–∞–¥—ñ,</b> "
                                               "‚Äì —Ç–µ–ø–µ—Ä —Ç–∏ <b>–≥–æ—Ç–æ–≤–∏–π –¥—ñ—è—Ç–∏.</b>"
                                               "\n\nüí° <b>–©–æ –¥–∞–ª—ñ?</b>"
                                               "\n ‚úÖ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —É—Å–µ, —â–æ –¥—ñ–∑–Ω–∞–≤—Å—è ‚Äì —É —Å–≤–æ—ó–π —Ü–µ—Ä–∫–≤—ñ, —Å–ª—É–∂—ñ–Ω–Ω—ñ, –∫–æ–º–∞–Ω–¥—ñ,"
                                               " —Å—ñ–º‚Äô—ó."
                                               "\n ‚úÖ –í—ñ–¥—á—É–≤–∞—î—à –ø–æ–∫–ª–∏–∫ –¥–æ –∑–∞—Å–Ω—É–≤–∞–Ω–Ω—è —Ü–µ—Ä–∫–≤–∏? <b>–ù–µ –∑–≤–æ–ª—ñ–∫–∞–π!</b>"
                                               " –ó—Ä–æ–±–∏ –ø–µ—Ä—à–∏–π –∫—Ä–æ–∫!"
                                               "\n ‚úÖ –ó–∞–ª–∏—à–∞–π—Å—è –Ω–∞ –∑–≤‚Äô—è–∑–∫—É –∑ –Ω–∞—à–æ—é –∫–æ–º–∞–Ω–¥–æ—é, –ø—Ä–∏—î–¥–Ω—É–π—Å—è –¥–æ —Å–ø—ñ–ª—å–Ω–æ—Ç–∏ —Ç–∞"
                                               " –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü—ñ–π."
                                               "\n\nüéÅ<b>–ú–∞—î–º–æ –ø–æ–¥–∞—Ä—É–Ω–æ–∫ –¥–ª—è —Ç–µ–±–µ!</b>"
                                               "\n–©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ <b>—Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç</b> –ø—Ä–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∫—É—Ä—Å—É —Ç–∞ <b>–æ—Å–æ–±–ª–∏–≤–∏–π"
                                               " –ø–æ–¥–∞—Ä—É–Ω–æ–∫</b> –≤—ñ–¥ –Ω–∞—Å, –Ω–∞–ø–∏—à–∏ –≤ —á–∞—Ç –ø—ñ–¥—Ç—Ä–∏–º–∫–∏!"
                                               "\n\nüôè <b>–ú–∏ –º–æ–ª–∏–º–æ—Å—è –∑–∞ —Ç–µ–±–µ —ñ –±–ª–∞–≥–æ—Å–ª–æ–≤–ª—è—î–º–æ —Ç–≤—ñ–π —à–ª—è—Ö!</b> –ù–µ—Ö–∞–π –ë–æ–≥"
                                               " –≤–µ–¥–µ —Ç–µ–±–µ —É —Ç–≤–æ—î–º—É –ø–æ–∫–ª–∏–∫–∞–Ω–Ω—ñ, –∞ —Ç–∏ <b>—Ä—É—Ö–∞–π—Å—è –≤–ø–µ—Ä–µ–¥ —ñ–∑ –≤—ñ—Ä–æ—é —Ç–∞"
                                               " –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—é!</b>"
                                               "\n\n<b>–¢–∏ –∫—Ä—É—Ç–æ –ø–æ–ø—Ä–∞—Ü—é–≤–∞–≤ ‚Äì —Ç–µ–ø–µ—Ä —á–∞—Å –¥—ñ—è—Ç–∏!</b> üöÄüî•",
                                       reply_markup=sm.main_menu(user.is_admin))
            return

        module_start_date = await AsyncDB.get_module_start_date(message.chat.id)

        if not user:
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
            return

        if module_start_date:
            module_start_date = module_start_date.date() if isinstance(module_start_date, datetime) else module_start_date
            days_passed = (datetime.now().date() - module_start_date).days
            days_left = 15 - days_passed

            if days_passed < 15:
                keyboard = get_lesson_keyboard(getattr(user, "current_lesson", 1))
                await message.answer(f"–ù–∞—Å—Ç—É–ø–Ω–∏–π –º–æ–¥—É–ª—å –±—É–¥–µ –≤—ñ–¥–∫—Ä–∏—Ç–æ —á–µ—Ä–µ–∑ {days_left} –¥–Ω—ñ–≤.",
                                     reply_markup=keyboard)
                return
            else:
                await message.answer("ger")


# @dp.message(F.text == "ADMIN")
# async def next_module(message: Message):
#     tel_id = message.chat.id
#     user = await AsyncDB.get_user(tel_id)
#     if user.is_admin == 1:



async def check_modules():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ 15 –¥–Ω–µ–π."""
    users = await AsyncDB.get_all_users()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    updated_users = []  # –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –æ–±–Ω–æ–≤–∏–º –º–æ–¥—É–ª—å

    for user in users:
        module_start_date = user.get("module_start_date")
        current_module = user.get("current_module", 1)  # –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ 1

        if not module_start_date:
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –¥–∞—Ç—ã —Å—Ç–∞—Ä—Ç–∞

        module_start_date = module_start_date.date() if isinstance(module_start_date, datetime) else module_start_date
        days_passed = (datetime.now().date() - module_start_date).days

        if days_passed >= 15:
            await AsyncDB.update_current_lesson(user["tel_id"], 1)
            new_module = current_module + 1
            await AsyncDB.update_current_module(user["tel_id"], new_module)


async def daily_texts():
    """–†–∞—Å—Å—ã–ª–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∫–∞–∫–∏—Ö-—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–π """
    users = await AsyncDB.get_all_users_in_model()
    for user in users:
        if user.is_blocked != 1:
            if user.current_module >= 1:
                module_date = datetime.strptime(str(user.module_start_date),
                                                "%Y-%m-%d %H:%M:%S").date()  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É
                today = date.today()  # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞
                days_difference = (today - module_date).days  # —Ä–∞–∑–Ω–∏—Ü–∞ –¥–∞—Ç
                if days_difference in {2, 4, 6, 8, 10, 12, 14}:
                    text = MODULES_TEXTS[f"module{user.current_module}"][str(int(days_difference/2))]
                    await bot.send_message(user.tel_id, text=text, disable_notification=True)


def block_inactive_users_sync():
    loop = asyncio.get_running_loop()
    loop.create_task(block_inactive_users())


def check_modules_sync():
    loop = asyncio.get_running_loop()
    loop.create_task(check_modules())


def daily_texts_sync():
    loop = asyncio.get_running_loop()
    loop.create_task(daily_texts())


async def scheduler():
    while True:
        schedule.run_pending()
        await asyncio.sleep(60)


async def main():
    schedule.every().day.at("03:59").do(block_inactive_users_sync)
    schedule.every().day.at("04:09").do(check_modules_sync)
    schedule.every().day.at("04:19").do(daily_texts_sync)

    asyncio.create_task(scheduler())
    await dp.start_polling(bot)

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print('Exit')
