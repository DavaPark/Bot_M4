import asyncio
import logging
import re

from aiogram import Bot, Dispatcher, F, types
from aiogram.fsm.context import FSMContext
from aiogram.filters import CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, FSInputFile, InlineKeyboardButton, InlineKeyboardMarkup, \
    KeyboardButton, ReplyKeyboardMarkup, InputFile
from scripts.config import TOKEN_API
from scripts.db_manager import AsyncDB, block_inactive_users, \
    get_lesson_data_json, update_current_video_index, update_current_test_index, update_current_video_index_0, \
    get_videos_by_module_lesson
from datetime import datetime
from scripts.markup import get_lesson_keyboard

import scripts.markup as sm

bot = Bot(TOKEN_API)
dp = Dispatcher()


@dp.message(CommandStart())
async def cmd_start(message: Message):
    await AsyncDB.update_user(message.from_user.id, last_date=datetime.now().date())
    existing_user = await AsyncDB.get_user_by_telegram_id(message.from_user.id)
    if existing_user:
        await message.answer('‚úÖ C –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!')
        await message.answer('https://drive.google.com/file/d/1X3XKbHSVr6j-ljYcoKWvFUSftAwFyqL9/view',
                             reply_markup=sm.menu_buttons_keyboard)
    else:
        video_path = r"D:\PythonProjects\video_2025-02-17_14-08-40.mp4"
        video = FSInputFile(video_path)
        await message.answer_video(video)
        await message.answer(f'Hello {message.from_user.first_name}', reply_markup=sm.main_regicter_inline_markup)


@dp.callback_query(F.data == 'program')
async def program(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer('https://drive.google.com/file/d/1X3XKbHSVr6j-ljYcoKWvFUSftAwFyqL9/view')
    await callback.message.answer_photo(photo='https://ionity.ua/wp-content/uploads/2025/01/m4-cs.jpg.jpg')
    await callback.message.answer('text', reply_markup=sm.program_go_back_inline_markup)


@dp.callback_query(F.data == 'program_go_back')
async def program_go_back(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer('https://drive.google.com/file/d/1X3XKbHSVr6j-ljYcoKWvFUSftAwFyqL9/view',
                                  caption='text',
                                  reply_markup=sm.main_regicter_inline_markup)


@dp.callback_query(F.data == 'why_need')
async def why_need(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer('https://drive.google.com/file/d/1X3XKbHSVr6j-ljYcoKWvFUSftAwFyqL9/view')
    await callback.message.answer('text', reply_markup=sm.program_go_back_inline_markup)


@dp.callback_query(F.data == 'register')
async def register(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer('https://drive.google.com/file/d/1X3XKbHSVr6j-ljYcoKWvFUSftAwFyqL9/view',
                                  caption='text',
                                  reply_markup=sm.register_inline_markup)


@dp.callback_query(F.data == 'go_back_register')
async def go_back_register(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer('https://drive.google.com/file/d/1X3XKbHSVr6j-ljYcoKWvFUSftAwFyqL9/view')
    await callback.message.answer('text', reply_markup=sm.main_regicter_inline_markup)


@dp.callback_query(F.data == "read_conditions")
async def read_conditions(callback: CallbackQuery):
    await callback.answer('üìå –£—Å–ª–æ–≤–∏—è: \n1Ô∏è‚É£ –í—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏. \n'
                          '2Ô∏è‚É£ –î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.\n'
                          '3Ô∏è‚É£ –°–ø–∞–º '
                          '–∑–∞–ø—Ä–µ—â—ë–Ω!',
                          show_alert=True)
    await callback.message.answer('–ï—Å–ª–∏ —Å–æ–≥–ª–∞—Å–Ω—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:',
                                  reply_markup=sm.register_accept_inline_markup)
    await callback.answer()


class RegisterState(StatesGroup):
    waiting_for_email = State()


EMAIL_REGEX = r"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"


@dp.callback_query(F.data == 'accept')
async def accept(callback: CallbackQuery, state: FSMContext):
    await state.set_state(RegisterState.waiting_for_email)
    existing_user = await AsyncDB.get_user_by_telegram_id(callback.from_user.id)
    if existing_user:
        await callback.message.answer('‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º...')
        await callback.message.answer('https://drive.google.com/file/d/1X3XKbHSVr6j-ljYcoKWvFUSftAwFyqL9/view',
                                      caption='text',
                                      reply_markup=sm.accept_inline_markup)
    else:
        await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:')


@dp.message(RegisterState.waiting_for_email)
async def process_email(message: Message, state: FSMContext):
    email = message.text.strip()
    if not re.match(EMAIL_REGEX, email):
        await message.answer('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä: example@gmail.com')
        return

    await state.update_data(email=email)
    user_data = await state.get_data()
    await AsyncDB.create_user(
        telegram_id=message.from_user.id,
        name=message.from_user.full_name,
        email=user_data["email"]
    )
    await AsyncDB.create_user_progress(telegram_id=message.from_user.id)
    await message.answer('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')

    await state.clear()

    await message.answer('https://drive.google.com/file/d/1X3XKbHSVr6j-ljYcoKWvFUSftAwFyqL9/view',
                         caption='text',
                         reply_markup=sm.accept_inline_markup)


@dp.callback_query(F.data == 'go_back_accept')
async def register(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer('https://drive.google.com/file/d/1X3XKbHSVr6j-ljYcoKWvFUSftAwFyqL9/view',
                                  caption='text',
                                  reply_markup=sm.register_inline_markup)


@dp.callback_query(F.data == 'form')
async def form(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer('https://drive.google.com/file/d/1X3XKbHSVr6j-ljYcoKWvFUSftAwFyqL9/view',
                                  caption='text',
                                  reply_markup=sm.form_inline_markup)


@dp.callback_query(F.data == 'go_back_form')
async def go_back_form(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer('https://drive.google.com/file/d/1X3XKbHSVr6j-ljYcoKWvFUSftAwFyqL9/view',
                                  caption='text',
                                  reply_markup=sm.accept_inline_markup)


@dp.callback_query(F.data == 'pay')
async def pay(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer_photo(
        photo='https://www.apple.com/v/apple-pay/u/images/meta/apple_pay__c08w264834sy_og.png?202502121246',
        caption='text',
        reply_markup=sm.pay_inline_markup)


@dp.callback_query(F.data == 'to_pay')
async def front_of_menu(callback: CallbackQuery):
    await callback.message.answer('https://drive.google.com/file/d/1X3XKbHSVr6j-ljYcoKWvFUSftAwFyqL9/view',
                                  reply_markup=sm.menu_buttons_keyboard)


@dp.message(F.text == "–ù–∞–≤—á–∞–Ω–Ω—è üìö")
async def study(message: Message):
    user = await AsyncDB.get_user(message.from_user.id)

    if not user:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    keyboard = sm.get_module_keyboard(getattr(user, "current_module", 1))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å:", reply_markup=keyboard)


@dp.message(F.text == '–Ø–∫ –Ω–∞–≤—á–∞—Ç–∏—Å—è?')
async def study_how(message: Message):

    await message.answer('text', reply_markup=sm.module_back_buttons_keyboard)
    # video_url = 'https://drive.google.com/uc?export=download&id=1X3XKbHSVr6j-ljYcoKWvFUSftAwFyqL9'

    # await message.answer_video(video_url,)


@dp.message(lambda message: message.text.startswith('–ú–æ–¥—É–ª—å'))
async def handle_module(message: Message):
    module_number = int(message.text.split(" ")[1])  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –º–æ–¥—É–ª—è
    tel_id = message.from_user.id

    await AsyncDB.update_user_progress_module(tel_id, module_number)

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î –ø–æ telegram_id
    user = await AsyncDB.get_user_by_telegram_id(message.from_user.id)

    if user:
        user = await AsyncDB.get_user(message.from_user.id)

        if not user:
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
            return

        keyboard = get_lesson_keyboard(getattr(user, "current_lesson", 1))
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫:", reply_markup=keyboard)
    else:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–£—Ä–æ–∫"
@dp.message(lambda message: message.text.startswith('–£—Ä–æ–∫'))
async def handle_lesson(message: Message):
    lesson_number = int(message.text.split(" ")[1])  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞
    tel_id = message.from_user.id
    module_number = await AsyncDB.get_user_progress_current_module(tel_id)
    current_module = await AsyncDB.get_user_current_module(tel_id)
    current_lesson = await AsyncDB.get_current_lesson(tel_id)

    if module_number == current_module and lesson_number == current_lesson:
        await update_current_video_index_0(lesson_number, module_number)

        await AsyncDB.update_user_progress_lesson(tel_id, lesson_number)

        lesson_data = await get_lesson_data_json(module_number, lesson_number)

        if lesson_data:
            first_video = lesson_data["video"][0].get("video_1")  # –ü–µ—Ä–≤–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ
            first_test_link = lesson_data["test_links"][0].get("test_1")  # –ü–µ—Ä–≤–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ—Å—Ç

            # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É –¥–ª—è —Ç–µ—Å—Ç–∞
            test_button = InlineKeyboardButton(text="–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", url=first_test_link)

            # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            lesson_keyboard = InlineKeyboardMarkup(inline_keyboard=[[test_button]])

            # –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–ª–∞–π-–∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
            next_button = KeyboardButton(text="–î–∞–ª—ñ")
            lesson_keyboard_reply = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[[next_button]])

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∏–¥–µ–æ –∏ –∫–Ω–æ–ø–∫–æ–π
            await message.answer(
                f"–í–∞—à–µ –≤–∏–¥–µ–æ –¥–ª—è {lesson_data['title']}:\n{first_video}",
                reply_markup=lesson_keyboard
            )

            if not lesson_data:
                await message.answer("–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                return

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –≤–∏–¥–µ–æ
            video_index = lesson_data['current_video_index']
            await update_current_video_index(module_number, lesson_number, video_index + 1)
            await update_current_test_index(module_number, lesson_number, video_index + 1)
            await message.answer("–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É, –Ω–∞–∂–º–∏—Ç–µ '–î–∞–ª—ñ'.",
                                 reply_markup=lesson_keyboard_reply)  # –ó–¥–µ—Å—å —Ä–µ–ø–ª–∞–π-–∫–Ω–æ–ø–∫–∞)
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ–± —É—Ä–æ–∫–µ.")
    else:
        lesson_data = await get_videos_by_module_lesson(module_number, lesson_number)
        await message.answer(f'–í–æ—Ç —É—Å—ñ –≤—ñ–¥–µ–æ {lesson_data}',
                             reply_markup=sm.lesson_back_buttons_keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î–∞–ª—ñ"
@dp.message(lambda message: message.text == '–î–∞–ª—ñ')
async def handle_next_button(message: Message):
    tel_id = message.from_user.id
    current_module = await AsyncDB.get_user_progress_current_module(tel_id)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_lesson_data = await AsyncDB.get_user_progress_current_lesson(tel_id)
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞ –∏–∑ JSON
    lesson_data = await get_lesson_data_json(current_module, current_lesson_data)

    if not current_lesson_data:
        await message.answer("–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if not lesson_data:
        await message.answer("–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –≤–∏–¥–µ–æ
    video_index = lesson_data['current_video_index']

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–µ–¥—É—é—â–µ–µ –≤–∏–¥–µ–æ
    if video_index < len(lesson_data['video']):
        # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ –≤–∏–¥–µ–æ
        video_url = list(lesson_data['video'][video_index].values())[0]  # –ø–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ
        test_index = lesson_data['current_test_index']
        if test_index < len(lesson_data['test_links']):
            # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ—Å—Ç
            test_url = list(lesson_data['test_links'][test_index].values())[0]  # –ø–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ—Å—Ç
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É –¥–ª—è —Ç–µ—Å—Ç–∞
            test_button = InlineKeyboardButton(text="–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", url=test_url)

            # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            lesson_keyboard = InlineKeyboardMarkup(inline_keyboard=[[test_button]])
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –≤–∏–¥–µ–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await update_current_video_index(current_module, current_lesson_data, video_index + 1)
            await message.answer(f"–°–º–æ—Ç—Ä–∏—Ç–µ –≤–∏–¥–µ–æ: {video_url}",
                                 reply_markup=lesson_keyboard)
        else:
            await message.answer('–í–∏ –º–æ–ª–æ–¥—Ü—ñ!')
    else:
        await message.answer("–í–∏ –º–æ–ª–æ–¥—Ü—ñ –ø—Ä–∏—Å—Ç—É–ø–∞–π—Ç–µ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —É—Ä–æ–∫—É",
                             reply_markup=sm.get_next_lesson_keyboard())


@dp.message(lambda message: message.text == "–°–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–∫")
async def handle_next_lesson(message: Message):
    tel_id = message.from_user.id
    current_lesson = await AsyncDB.get_current_lesson(tel_id)
    next_lesson = current_lesson + 1

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —É—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –æ–Ω —É–∂–µ –ø—Ä–æ—à–µ–ª
    if current_lesson is not None and current_lesson <= 6:  # –ù–∞–ø—Ä–∏–º–µ—Ä, —É –Ω–∞—Å 6 —É—Ä–æ–∫–æ–≤
        await AsyncDB.update_current_lesson(tel_id, next_lesson)
        await message.answer(f"–í—ã –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ {next_lesson}-–π —É—Ä–æ–∫. –£–¥–∞—á–∏ –≤ –æ–±—É—á–µ–Ω–∏–∏!")

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª–µ–¥—É—é—â–∏—Ö —É—Ä–æ–∫–æ–≤
        user = await AsyncDB.get_user_by_telegram_id(tel_id)
        if user:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–≤—ã–º —É—Ä–æ–∫–æ–º
            keyboard = get_lesson_keyboard(next_lesson)
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫:", reply_markup=keyboard)
        else:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    else:
        await message.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—Å–µ —É—Ä–æ–∫–∏ —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è!")


@dp.message(F.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —É—Ä–æ–∫–∞–º")
async def back_to_lessons(message: Message):
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î –ø–æ telegram_id
    user = await AsyncDB.get_user_by_telegram_id(message.from_user.id)

    if user:
        user = await AsyncDB.get_user(message.from_user.id)

        if not user:
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
            return

        keyboard = get_lesson_keyboard(getattr(user, "current_lesson", 1))
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫:", reply_markup=keyboard)
    else:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")


@dp.message(F.text == "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
async def back_to_lessons(message: Message):
    await message.answer("–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.",
                         reply_markup=sm.menu_buttons_keyboard)


@dp.message(F.text == "üîô–ú–æ–¥—É–ª—ñ")
async def back_to_lessons(message: Message):
    user = await AsyncDB.get_user(message.from_user.id)
    keyboard = sm.get_module_keyboard(getattr(user, "current_module", 1))
    await message.answer("–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –º–æ–¥—É–ª—ñ–≤:", reply_markup=keyboard)


async def check_modules():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ 15 –¥–Ω–µ–π."""
    users = await AsyncDB.get_all_users()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    for user in users:
        if user.module_start_date and user.current_module < 6:
            days_passed = (datetime.now().date() - user.module_start_date).days
            if days_passed >= 15:
                await AsyncDB.update_current_module(user.tel_id, user.current_module + 1)
                await AsyncDB.set_module_start_date(user.tel_id)


async def scheduler():
    while True:
        await block_inactive_users()
        await check_modules()
        await asyncio.sleep(86400)


async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
try:
    asyncio.run(main())
    asyncio.run(scheduler())
except KeyboardInterrupt:
    print('Exit')
