import asyncio
import json
import logging
import re

from aiogram.client.default import DefaultBotProperties
from aiogram import Bot, Dispatcher, F
from aiogram.fsm.context import FSMContext
from aiogram.filters import CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup, \
    KeyboardButton, ReplyKeyboardMarkup
from scripts.config import TOKEN_API, W4P_KEY, DOMAIN_NAME, MERCHANT_ACCOUNT
from scripts.db_manager import AsyncDB, block_inactive_users, \
    get_lesson_data_json, update_current_video_index, update_current_test_index, update_current_video_index_0, \
    get_current_video_index, update_current_test_index_0, get_current_test_index
from datetime import datetime
from scripts.markup import get_lesson_keyboard

import scripts.markup as sm
from scripts.texts import *
from scripts.way4pay import WayForPay

bot = Bot(TOKEN_API, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()


@dp.message(CommandStart())
async def cmd_start(message: Message):
    await AsyncDB.update_user(message.chat.id, last_date=datetime.now().date())
    existing_user = await AsyncDB.get_user_by_telegram_id(message.chat.id)
    if existing_user:
        video_id = 'BAACAgIAAxkBAAPFZ8Bu8ajHtoaignWxQ97udddTYCwAAq5hAAJXDAhKFdXY_cFCbyE2BA'
        await message.answer_video(video_id,
                                   reply_markup=sm.menu_buttons_keyboard)
    else:

        video_id = "BAACAgIAAxkBAAMDZ8BKn5Cuc8QAAb0ce2k7QJdqiP9aAAKlcgACVwwAAUpvyyB6gghfJjYE"
        await message.answer_video(video_id)
        await message.answer("üëã –ü—Ä–∏–≤—ñ—Ç! <b>–†–∞–¥—ñ, —â–æ —Ç–∏ —Ç—É—Ç!</b> –Ø–∫—â–æ —Ç–∏ –¥–∏–≤–∏—à—Å—è —Ü–µ –≤—ñ–¥–µ–æ, –∑–Ω–∞—á–∏—Ç—å, –ø—Ä–∞–≥–Ω–µ—à –∑—Ä–æ–∑—É–º—ñ—Ç–∏ —Å–≤—ñ–π –ø–æ–∫–ª–∏–∫. –Ü —Ü–µ —á—É–¥–æ–≤–æ! üéØ\n"
                             "\n<b>–ú4 –Ü–Ω—Ç–µ–Ω—Å–∏–≤</b> ‚Äì —Ü–µ 90 –¥–Ω—ñ–≤ –ø—Ä–∞–∫—Ç–∏—á–Ω–æ–≥–æ –Ω–∞–≤—á–∞–Ω–Ω—è, —â–æ –¥–æ–ø–æ–º–æ–∂–µ —Ç–æ–±—ñ –∑–Ω–∞–π—Ç–∏ —Å–≤–æ—î –º—ñ—Å—Ü–µ –≤ —Å–ª—É–∂—ñ–Ω–Ω—ñ. –ú–∏ –ø—ñ–¥—Ç—Ä–∏–º–∞—î–º–æ —Ç–µ–±–µ –Ω–∞ —Ü—å–æ–º—É —à–ª—è—Ö—É —Ç–∞ –¥–∞–º–æ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –¥–ª—è –≤–ø–µ–≤–Ω–µ–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç—É.\n"
                             "\n<b>–Ø–∫ –ø–æ—á–∞—Ç–∏?</b>\n"
                             "\nüîπ <b>–©–æ–± –≤–ø–µ–≤–Ω–∏—Ç–∏—Å—è, —â–æ —Ü–µ –¥–ª—è —Ç–µ–±–µ</b> ‚Äì –ø–µ—Ä–µ–≥–ª—è–Ω—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—ñ–¥ –≤—ñ–¥–µ–æ: –ø—Ä–æ –Ω–∞—Å, –ø—Ä–æ–≥—Ä–∞–º—É –∫—É—Ä—Å—É, –≤—ñ–¥–≥—É–∫–∏ —É—á–∞—Å–Ω–∏–∫—ñ–≤. –î–æ—Å–ª—ñ–¥–∂—É–π —Ç–∞ –ø—Ä–∏–π–º–∞–π —Ä—ñ—à–µ–Ω–Ω—è!\n"
                             "üîπ <b>–ì–æ—Ç–æ–≤–∏–π –∑—Ä–æ–±–∏—Ç–∏ –∫—Ä–æ–∫?</b> –ù–∞—Ç–∏—Å–∫–∞–π '–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è', –∑–∞–ø–æ–≤–Ω—é–π —Ñ–æ—Ä–º—É —Ç–∞ —Å—Ç–∞–≤–∞–π —á–∞—Å—Ç–∏–Ω–æ—é –Ω–∞—à–æ—ó —Å–ø—ñ–ª—å–Ω–æ—Ç–∏! üöÄ",
                             reply_markup=sm.main_regicter_inline_markup)


@dp.callback_query(F.data == 'program')
async def program(callback: CallbackQuery):
    await callback.answer()
    video_id = "BAACAgIAAxkBAANWZ8BbIwP5xhYxSdZo52GR4QVaj6MAAsdzAAJXDAABStl7xdfRNRl-NgQ"
    await callback.message.answer_video(video_id)
    await callback.message.answer_photo(photo='AgACAgIAAxkBAANaZ8BbkqdO-1QYenBcyDJ3RqdnzrwAAkDmMRtApwABSsqe1imkYgvmAQADAgADeQADNgQ')
    await callback.message.answer("\n<b>–©–æ —Ç–∏ –æ—Ç—Ä–∏–º–∞—î—à –ø—ñ–¥ —á–∞—Å –Ω–∞–≤—á–∞–Ω–Ω—è?</b>\n"
                                  "M4 Ready ‚Äì —Ü–µ 90-–¥–µ–Ω–Ω–∏–π —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π –æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å —É Telegram, —è–∫–∏–π –¥–æ–ø–æ–º–æ–∂–µ —Ç–æ–±—ñ –∑—Ä–æ–∑—É–º—ñ—Ç–∏, —á–∏ –∫–ª–∏—á–µ —Ç–µ–±–µ –ë–æ–≥ –¥–æ –∑–∞—Å–Ω—É–≤–∞–Ω–Ω—è —Ü–µ—Ä–∫–≤–∏, —Ç–∞ –¥–∞—Å—Ç—å —á—ñ—Ç–∫–∏–π –ø–ª–∞–Ω –ø–æ–¥–∞–ª—å—à–∏—Ö –∫—Ä–æ–∫—ñ–≤ —É —Å–ª—É–∂—ñ–Ω–Ω—ñ.\n"
                                  "\n<b>üîπ –©–æ –≤–∫–ª—é—á–∞—î –Ω–∞–≤—á–∞–Ω–Ω—è?</b>\n"
                                  "‚úÖ <b>6 –∫–ª—é—á–æ–≤–∏—Ö –º–æ–¥—É–ª—ñ–≤</b> ‚Äì —É—Å–µ, —â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–ª—è —Ä–æ–∑–≤–∏—Ç–∫—É –ª—ñ–¥–µ—Ä—Å—Ç–≤–∞, –∫–æ–º–∞–Ω–¥–∏ —Ç–∞ –±–∞—á–µ–Ω–Ω—è —Ü–µ—Ä–∫–≤–∏.\n"
                                  "‚úÖ <b>–ü—Ä–∞–∫—Ç–∏—á–Ω—ñ –≤—ñ–¥–µ–æ—É—Ä–æ–∫–∏</b> ‚Äì —Å—Ç–∏—Å–ª–∞, —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –±–µ–∑ –≤–æ–¥–∏.\n"
                                  "‚úÖ <b>–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è</b> ‚Äì –Ω–µ –ø—Ä–æ—Å—Ç–æ —Å–ª—É—Ö–∞–π, –∞ –∑–∞—Å—Ç–æ—Å–æ–≤—É–π –∑–Ω–∞–Ω–Ω—è –≤ —Ä–µ–∞–ª—å–Ω–∏—Ö —Å–∏—Ç—É–∞—Ü—ñ—è—Ö.\n"
                                  "‚úÖ <b>–û–Ω–ª–∞–π–Ω-—Å–ø—ñ–ª—å–Ω–æ—Ç–∞</b> ‚Äì –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ —Ç–∞ –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è –≤—ñ–¥ —ñ–Ω—à–∏—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤ –∫—É—Ä—Å—É.\n"
                                  "‚úÖ <b>–†–µ–≥—ñ–æ–Ω–∞–ª—å–Ω—ñ –∑—É—Å—Ç—Ä—ñ—á—ñ</b> ‚Äì –∂–∏–≤–µ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è, –æ–±–º—ñ–Ω –¥–æ—Å–≤—ñ–¥–æ–º —ñ –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è.\n"
                                  "‚úÖ <b>–ì–Ω—É—á–∫–∏–π —Ñ–æ—Ä–º–∞—Ç</b> ‚Äì –Ω–∞–≤—á–∞–π—Å—è –≤ –∑—Ä—É—á–Ω–æ–º—É —Ä–∏—Ç–º—ñ, –∫–æ–ª–∏ —Ç–æ–±—ñ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ.\n"
                                  "‚úÖ <b>–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π –ø–ª–∞–Ω –¥—ñ–π</b> ‚Äì –æ—Ç—Ä–∏–º–∞—î—à –∑—Ä–æ–∑—É–º—ñ–ª–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ —Ä–æ–∑–≤–∏—Ç–∫—É –≥—Ä–æ–º–∞–¥–∏.\n"
                                  "‚úÖ <b>–î–æ—Å–≤—ñ–¥ –ø—Ä–∞–∫—Ç–∏–∫—ñ–≤</b> ‚Äì –Ω–∞–≤—á–∞–Ω–Ω—è –≤—ñ–¥ –ª—ñ–¥–µ—Ä—ñ–≤, —è–∫—ñ –≤–∂–µ –∑–∞—Å–Ω—É–≤–∞–ª–∏ —Ü–µ—Ä–∫–≤–∏.\n"
                                  "‚úÖ <b>–§–æ–∫—É—Å –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç</b> ‚Äì –ª–∏—à–µ —Ç–µ, —â–æ –¥—ñ–π—Å–Ω–æ –ø—Ä–∞—Ü—é—î —É —Å—É—á–∞—Å–Ω–æ–º—É —Å–ª—É–∂—ñ–Ω–Ω—ñ.\n"
                                  "\nüéØ <b>–î–ª—è –∫–æ–≥–æ —Ü–µ–π –∫—É—Ä—Å?</b>\n"
                                  "\n <b>-</b> –î–ª—è —Ç–∏—Ö, —Ö—Ç–æ —Ö–æ—á–µ –∑—Ä–æ–∑—É–º—ñ—Ç–∏, —á–∏ –∫–ª–∏—á–µ —ó—Ö –ë–æ–≥ –¥–æ –∑–∞—Å–Ω—É–≤–∞–Ω–Ω—è —Ü–µ—Ä–∫–≤–∏.\n"
                                  "<b>-</b> –î–ª—è –º–æ–ª–æ–¥–∏—Ö –ª—ñ–¥–µ—Ä—ñ–≤, —è–∫—ñ —à—É–∫–∞—é—Ç—å —Å–≤–æ—î –º—ñ—Å—Ü–µ –≤ —Å–ª—É–∂—ñ–Ω–Ω—ñ.\n"
                                  "<b>-</b> –î–ª—è —Ç–∏—Ö, —Ö—Ç–æ –ø—Ä–∞–≥–Ω–µ –Ω–∞–≤—á–∏—Ç–∏—Å—å –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É —Ç–∞ –±—É–¥—É–≤–∞—Ç–∏ –≥—Ä–æ–º–∞–¥—É.\n"
                                  "\nüìå<b> –Ø–∫—â–æ —Ç–∏ —à—É–∫–∞—î—à —è—Å–Ω—ñ—Å—Ç—å —É –ø–æ–∫–ª–∏–∫–∞–Ω–Ω—ñ —Ç–∞ —á—ñ—Ç–∫—ñ –∫—Ä–æ–∫–∏ –¥–ª—è —Å–ª—É–∂—ñ–Ω–Ω—è ‚Äì —Ü–µ–π –∫—É—Ä—Å –¥–ª—è —Ç–µ–±–µ!</b>\n"
                                  "\n–ù–∞—Ç–∏—Å–∫–∞–π '–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è' —Ç–∞ –ø—Ä–∏—î–¥–Ω—É–π—Å—è –¥–æ –Ω–∞–≤—á–∞–Ω–Ω—èüöÄ",
                                  reply_markup=sm.program_go_back_inline_markup)


@dp.callback_query(F.data == 'program_go_back')
async def program_go_back(callback: CallbackQuery):
    await callback.answer()
    video_id = "BAACAgIAAxkBAAMDZ8BKn5Cuc8QAAb0ce2k7QJdqiP9aAAKlcgACVwwAAUpvyyB6gghfJjYE"
    await callback.message.answer_video(video_id)
    await callback.message.answer("üëã –ü—Ä–∏–≤—ñ—Ç! <b>–†–∞–¥—ñ, —â–æ —Ç–∏ —Ç—É—Ç!</b> –Ø–∫—â–æ —Ç–∏ –¥–∏–≤–∏—à—Å—è —Ü–µ –≤—ñ–¥–µ–æ, –∑–Ω–∞—á–∏—Ç—å, –ø—Ä–∞–≥–Ω–µ—à –∑—Ä–æ–∑—É–º—ñ—Ç–∏ —Å–≤—ñ–π –ø–æ–∫–ª–∏–∫. –Ü —Ü–µ —á—É–¥–æ–≤–æ! üéØ\n"
                             "\n<b>–ú4 –Ü–Ω—Ç–µ–Ω—Å–∏–≤</b> ‚Äì —Ü–µ 90 –¥–Ω—ñ–≤ –ø—Ä–∞–∫—Ç–∏—á–Ω–æ–≥–æ –Ω–∞–≤—á–∞–Ω–Ω—è, —â–æ –¥–æ–ø–æ–º–æ–∂–µ —Ç–æ–±—ñ –∑–Ω–∞–π—Ç–∏ —Å–≤–æ—î –º—ñ—Å—Ü–µ –≤ —Å–ª—É–∂—ñ–Ω–Ω—ñ. –ú–∏ –ø—ñ–¥—Ç—Ä–∏–º–∞—î–º–æ —Ç–µ–±–µ –Ω–∞ —Ü—å–æ–º—É —à–ª—è—Ö—É —Ç–∞ –¥–∞–º–æ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏ –¥–ª—è –≤–ø–µ–≤–Ω–µ–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç—É.\n"
                             "\n<b>–Ø–∫ –ø–æ—á–∞—Ç–∏?</b>\n"
                             "\nüîπ <b>–©–æ–± –≤–ø–µ–≤–Ω–∏—Ç–∏—Å—è, —â–æ —Ü–µ –¥–ª—è —Ç–µ–±–µ ‚Äì –ø–µ—Ä–µ–≥–ª—è–Ω—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—ñ–¥ –≤—ñ–¥–µ–æ: –ø—Ä–æ –Ω–∞—Å, –ø—Ä–æ–≥—Ä–∞–º—É –∫—É—Ä—Å—É, –≤—ñ–¥–≥—É–∫–∏ —É—á–∞—Å–Ω–∏–∫—ñ–≤. –î–æ—Å–ª—ñ–¥–∂—É–π —Ç–∞ –ø—Ä–∏–π–º–∞–π —Ä—ñ—à–µ–Ω–Ω—è!\n"
                             "üîπ <b>–ì–æ—Ç–æ–≤–∏–π –∑—Ä–æ–±–∏—Ç–∏ –∫—Ä–æ–∫? –ù–∞—Ç–∏—Å–∫–∞–π '–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è', –∑–∞–ø–æ–≤–Ω—é–π —Ñ–æ—Ä–º—É —Ç–∞ —Å—Ç–∞–≤–∞–π —á–∞—Å—Ç–∏–Ω–æ—é –Ω–∞—à–æ—ó —Å–ø—ñ–ª—å–Ω–æ—Ç–∏! üöÄ",
                                  reply_markup=sm.main_regicter_inline_markup)


@dp.callback_query(F.data == 'why_need')
async def why_need(callback: CallbackQuery):
    await callback.answer()
    video_id = 'BAACAgIAAxkBAAOnZ8BnIbfCSg2R5HU4izjpcI-7dzgAAqdhAAJApwABSsDvmC8dOYGgNgQ'
    await callback.message.answer_video(video_id)
    await callback.message.answer_photo(photo='AgACAgIAAxkBAAOjZ8BmyzugXiu1u03VDUA7QorTKtgAApjpMRtXDAhKvNirwneIGxUBAAMCAAN5AAM2BA')
    await callback.message.answer("üöÄ <b>–ß–∏ –∫–ª–∏—á–µ —Ç–µ–±–µ –ë–æ–≥ –¥–æ –∑–∞—Å–Ω—É–≤–∞–Ω–Ω—è —Ü–µ—Ä–∫–≤–∏?</b>\n"
                                  "\n–¢–∏ –≤—ñ–¥—á—É–≤–∞—î—à, —â–æ –ë–æ–≥ –º–æ–∂–µ –∫–ª–∏–∫–∞—Ç–∏ —Ç–µ–±–µ –¥–æ –±—ñ–ª—å—à–æ–≥–æ, –∞–ª–µ –Ω–µ –∑–Ω–∞—î—à, –∑ —á–æ–≥–æ –ø–æ—á–∞—Ç–∏? –ß–∏ –∞–∫—Ç–∏–≤–Ω–æ –¥—ñ–ª–∏—à—Å—è –Ñ–≤–∞–Ω–≥–µ–ª—ñ—î–º, –¥–±–∞—î—à –ø—Ä–æ –ª—é–¥–µ–π, –ø—Ä–∞–≥–Ω–µ—à –∑–º—ñ–Ω —É —Å–≤–æ—ó–π –≥—Ä–æ–º–∞–¥—ñ, –∞–ª–µ –Ω–µ –≤–ø–µ–≤–Ω–µ–Ω–∏–π, —á–∏ –≤–∞—Ä—Ç–æ —Ç–æ–±—ñ –∑–∞—Å–Ω–æ–≤—É–≤–∞—Ç–∏ —Ü–µ—Ä–∫–≤—É? <b>M4 –Ü–Ω—Ç–µ–Ω—Å–∏–≤</b> ‚Äì —Ü–µ 90-–¥–µ–Ω–Ω–∏–π —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π –æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å —É Telegram, —Å—Ç–≤–æ—Ä–µ–Ω–∏–π —Å–∞–º–µ –¥–ª—è —Ç–∏—Ö, —Ö—Ç–æ —à—É–∫–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ —Ü—ñ –ø–∏—Ç–∞–Ω–Ω—è —Ç–∞ –ø—Ä–∞–≥–Ω–µ –∑—Ä–æ–±–∏—Ç–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ –ø–µ—Ä—à—ñ –∫—Ä–æ–∫–∏ —É —Å–≤–æ—î–º—É –ø–æ–∫–ª–∏–∫–∞–Ω–Ω—ñ.\n"
                                  "\nüîπ <b>–©–æ —Ç–∏ –æ—Ç—Ä–∏–º–∞—î—à?</b> \n"
                                  "\n ‚úÖ 6 –∫–ª—é—á–æ–≤–∏—Ö –º–æ–¥—É–ª—ñ–≤, —â–æ –ø—Ä–æ–≤–µ–¥—É—Ç—å —Ç–µ–±–µ –≤—ñ–¥ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –ø–æ–∫–ª–∏–∫–∞–Ω–Ω—è –¥–æ –ø—Ä–∞–∫—Ç–∏—á–Ω–æ–≥–æ —Å–ª—É–∂—ñ–Ω–Ω—è.\n"
                                  "‚úÖ –õ–∞–∫–æ–Ω—ñ—á–Ω—ñ –≤—ñ–¥–µ–æ—É—Ä–æ–∫–∏ —Ç–∞ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –∑–Ω–∞–Ω—å —É —Ä–µ–∞–ª—å–Ω–æ–º—É –∂–∏—Ç—Ç—ñ.\n"
                                  "‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥, —â–æ –¥–æ–ø–æ–º–æ–∂–µ —Ä—É—Ö–∞—Ç–∏—Å—è –≤–ø–µ—Ä–µ–¥ —É –∑—Ä—É—á–Ω–æ–º—É —Ç–µ–º–ø—ñ –±–µ–∑ —Ö–∞–æ—Å—É —Ç–∞ –ø–µ—Ä–µ–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è.\n"
                                  "‚úÖ –û–Ω–ª–∞–π–Ω-—Å–ø—ñ–ª—å–Ω–æ—Ç–∞, –¥–µ —Ç–∏ –∑–Ω–∞–π–¥–µ—à –ø—ñ–¥—Ç—Ä–∏–º–∫—É, –Ω–∞—Ç—Ö–Ω–µ–Ω–Ω—è —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ —Å–≤–æ—ó –ø–∏—Ç–∞–Ω–Ω—è.\n"
                                  "‚úÖ –†–µ–≥—ñ–æ–Ω–∞–ª—å–Ω—ñ –∑—É—Å—Ç—Ä—ñ—á—ñ –¥–ª—è –∑–Ω–∞–π–æ–º—Å—Ç–≤–∞, –æ–±–º—ñ–Ω—É –¥–æ—Å–≤—ñ–¥–æ–º —Ç–∞ –∑–º—ñ—Ü–Ω–µ–Ω–Ω—è —É –ø–æ–∫–ª–∏–∫–∞–Ω–Ω—ñ.\n"
                                  "\nüéØ <b>–î–ª—è –∫–æ–≥–æ —Ü–µ–π –∫—É—Ä—Å?</b>\n"
                                  "\n<b>-</b> –î–ª—è —Ç–∏—Ö, —Ö—Ç–æ —Ö–æ—á–µ –∑—Ä–æ–∑—É–º—ñ—Ç–∏, —á–∏ –¥—ñ–π—Å–Ω–æ –ë–æ–≥ –∫–ª–∏—á–µ —ó—Ö –∑–∞—Å–Ω–æ–≤—É–≤–∞—Ç–∏ —Ü–µ—Ä–∫–≤—É.\n"
                                  "<b>-</b> –î–ª—è –º–æ–ª–æ–¥–∏—Ö –ª—ñ–¥–µ—Ä—ñ–≤, —è–∫—ñ —à—É–∫–∞—é—Ç—å —Å–≤–æ—î –º—ñ—Å—Ü–µ –≤ —Å–ª—É–∂—ñ–Ω–Ω—ñ.\n"
                                  "<b>-</b> –î–ª—è —Ç–∏—Ö, —Ö—Ç–æ —Ö–æ—á–µ –Ω–∞–≤—á–∏—Ç–∏—Å—å –≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É —Ç–∞ —Ä–æ–∑–≤–∏–≤–∞—Ç–∏ –∑–¥–æ—Ä–æ–≤—É —Ü–µ—Ä–∫–≤—É.\n"
                                  "\n üìå <b>–Ø–∫—â–æ —Ç–∏ –ø—Ä–∞–≥–Ω–µ—à –∑–Ω–∞–π—Ç–∏ —á—ñ—Ç–∫–µ –±–∞—á–µ–Ω–Ω—è —Å–≤–æ–≥–æ –ø–æ–∫–ª–∏–∫–∞–Ω–Ω—è ‚Äì —Ü—è –ø—Ä–æ–≥—Ä–∞–º–∞ –¥–ª—è —Ç–µ–±–µ!</b> –ù–∞—Ç–∏—Å–∫–∞–π '–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è' —Ç–∞ —Å—Ç–∞–≤–∞–π —á–∞—Å—Ç–∏–Ω–æ—é —Ü—å–æ–≥–æ —à–ª—è—Ö—É.",
                                  reply_markup=sm.program_go_back_inline_markup)


@dp.callback_query(F.data == 'register')
async def register(callback: CallbackQuery):
    await callback.answer()
    video_id = 'BAACAgIAAxkBAAMKZ8BNTYitzbPryFUzEPINTV2IYkIAAtVyAAJXDAABShI4YflxeikaNgQ'
    await callback.message.answer_video(video_id,
                                  caption='üéâ –¢–∏ –Ω–∞ –∫—Ä–æ–∫ –±–ª–∏–∂—á–µ –¥–æ –∑–º—ñ–Ω! –ó–∞—Ä–∞–∑ –≤–∞–∂–ª–∏–≤–æ –≤–∏–∑–Ω–∞—á–∏—Ç–∏—Å—è: —á–∏ –≥–æ—Ç–æ–≤–∏–π —Ç–∏ —ñ–Ω–≤–µ—Å—Ç—É–≤–∞—Ç–∏ —á–∞—Å —É —Å–≤–æ—î –ø–æ–∫–ª–∏–∫–∞–Ω–Ω—è?\n'
                                          '\n<b>–©–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–Ω–∞—Ç–∏?</b>\n'
                                          '‚úÖ <b>–¶—ñ–Ω–Ω—ñ—Å—Ç—å –Ω–∞–≤—á–∞–Ω–Ω—è ‚Äì 145$</b>, –∞–ª–µ –¥–ª—è —É–∫—Ä–∞—ó–Ω—Ü—ñ–≤ –¥—ñ—î —Å–ø–µ—Ü–ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è ‚Äì <b>500 –≥—Ä–Ω</b>. –ú–∏ –≤—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É –æ–ø–ª–∞—Ç—É, —â–æ–± –¥–æ–ª—É—á–∞–ª–∏—Å—è –ª–∏—à–µ —Ç—ñ, —Ö—Ç–æ —Å–µ—Ä–π–æ–∑–Ω–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π –Ω–∞–≤—á–∞—Ç–∏—Å—è –π –∑–∞—Å—Ç–æ—Å–æ–≤—É–≤–∞—Ç–∏ –∑–Ω–∞–Ω–Ω—è –Ω–∞ –ø—Ä–∞–∫—Ç–∏—Ü—ñ.'
                                          '‚úÖ \n<b>–ü–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º –ø—Ä–∏–π–º–∏ —É–º–æ–≤–∏</b> ‚Äì —Ü–µ –≥–∞—Ä–∞–Ω—Ç—ñ—è —è–∫—ñ—Å–Ω–æ–≥–æ –Ω–∞–≤—á–∞–Ω–Ω—è.\n'
                                          '\n<b>–Ø–∫ –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è?</b>\n'
                                          '\n1Ô∏è‚É£ <b>–ü—Ä–æ—á–∏—Ç–∞–π —É–º–æ–≤–∏</b> ‚Äì –Ω–∞—Ç–∏—Å–Ω–∏ "–ü—Ä–æ—á–∏—Ç–∞—Ç–∏ —É–º–æ–≤–∏".\n'
                                          '2Ô∏è‚É£ <b>–ü—ñ–¥—Ç–≤–µ—Ä–¥—å –∑–≥–æ–¥—É</b> ‚Äì –Ω–∞—Ç–∏—Å–Ω–∏ "–ü—Ä–∏–π–Ω—è—Ç–∏ —É–º–æ–≤–∏".\n'
                                          '3Ô∏è‚É£ <b>–ó–∞–ø–æ–≤–Ω–∏ —Ñ–æ—Ä–º—É</b> —Ç–∞ –∑–∞–ª–∏—à e-mail. –ú–∞—î—à –ø–∏—Ç–∞–Ω–Ω—è? –ü–∏—à–∏ –Ω–∞ M4Ukraine@gmail.com.\n'
                                          '4Ô∏è‚É£ <b>–û–ø–ª–∞—Ç–∏ –∫—É—Ä—Å</b> ‚Äì —à–≤–∏–¥–∫–æ —Ç–∞ –±–µ–∑–ø–µ—á–Ω–æ —á–µ—Ä–µ–∑ WayForPay.\n'
                                          '\nüöÄ –Ø–∫—â–æ —Ç–∏ –≥–æ—Ç–æ–≤–∏–π –¥—ñ—è—Ç–∏ ‚Äì –ø–æ—á–Ω–µ–º–æ –ø—Ä–æ—Å—Ç–æ –∑–∞—Ä–∞–∑!',
                                  reply_markup=sm.register_inline_markup)


@dp.callback_query(F.data == 'go_back_register')
async def go_back_register(callback: CallbackQuery):
    await callback.answer()
    video_id = 'BAACAgIAAxkBAAMKZ8BNTYitzbPryFUzEPINTV2IYkIAAtVyAAJXDAABShI4YflxeikaNgQ'
    await callback.message.answer_video(video_id,
                                        caption='üéâ –¢–∏ –Ω–∞ –∫—Ä–æ–∫ –±–ª–∏–∂—á–µ –¥–æ –∑–º—ñ–Ω! –ó–∞—Ä–∞–∑ –≤–∞–∂–ª–∏–≤–æ –≤–∏–∑–Ω–∞—á–∏—Ç–∏—Å—è: —á–∏ –≥–æ—Ç–æ–≤–∏–π —Ç–∏ —ñ–Ω–≤–µ—Å—Ç—É–≤–∞—Ç–∏ —á–∞—Å —É —Å–≤–æ—î –ø–æ–∫–ª–∏–∫–∞–Ω–Ω—è?\n'
                                          '\n<b>–©–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–Ω–∞—Ç–∏?</b>\n'
                                          '‚úÖ <b>–¶—ñ–Ω–Ω—ñ—Å—Ç—å –Ω–∞–≤—á–∞–Ω–Ω—è ‚Äì 145$</b>, –∞–ª–µ –¥–ª—è —É–∫—Ä–∞—ó–Ω—Ü—ñ–≤ –¥—ñ—î —Å–ø–µ—Ü–ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è ‚Äì <b>500 –≥—Ä–Ω</b>. –ú–∏ –≤—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É –æ–ø–ª–∞—Ç—É, —â–æ–± –¥–æ–ª—É—á–∞–ª–∏—Å—è –ª–∏—à–µ —Ç—ñ, —Ö—Ç–æ —Å–µ—Ä–π–æ–∑–Ω–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π –Ω–∞–≤—á–∞—Ç–∏—Å—è –π –∑–∞—Å—Ç–æ—Å–æ–≤—É–≤–∞—Ç–∏ –∑–Ω–∞–Ω–Ω—è –Ω–∞ –ø—Ä–∞–∫—Ç–∏—Ü—ñ.'
                                          '‚úÖ \n<b>–ü–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º –ø—Ä–∏–π–º–∏ —É–º–æ–≤–∏</b> ‚Äì —Ü–µ –≥–∞—Ä–∞–Ω—Ç—ñ—è —è–∫—ñ—Å–Ω–æ–≥–æ –Ω–∞–≤—á–∞–Ω–Ω—è.\n'
                                          '\n<b>–Ø–∫ –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è?</b>\n'
                                          '\n1Ô∏è‚É£ <b>–ü—Ä–æ—á–∏—Ç–∞–π —É–º–æ–≤–∏</b> ‚Äì –Ω–∞—Ç–∏—Å–Ω–∏ "–ü—Ä–æ—á–∏—Ç–∞—Ç–∏ —É–º–æ–≤–∏".\n'
                                          '2Ô∏è‚É£ <b>–ü—ñ–¥—Ç–≤–µ—Ä–¥—å –∑–≥–æ–¥—É</b> ‚Äì –Ω–∞—Ç–∏—Å–Ω–∏ "–ü—Ä–∏–π–Ω—è—Ç–∏ —É–º–æ–≤–∏".\n'
                                          '3Ô∏è‚É£ <b>–ó–∞–ø–æ–≤–Ω–∏ —Ñ–æ—Ä–º—É</b> —Ç–∞ –∑–∞–ª–∏—à e-mail. –ú–∞—î—à –ø–∏—Ç–∞–Ω–Ω—è? –ü–∏—à–∏ –Ω–∞ M4Ukraine@gmail.com.\n'
                                          '4Ô∏è‚É£ <b>–û–ø–ª–∞—Ç–∏ –∫—É—Ä—Å</b> ‚Äì —à–≤–∏–¥–∫–æ —Ç–∞ –±–µ–∑–ø–µ—á–Ω–æ —á–µ—Ä–µ–∑ WayForPay.\n'
                                          '\nüöÄ –Ø–∫—â–æ —Ç–∏ –≥–æ—Ç–æ–≤–∏–π –¥—ñ—è—Ç–∏ ‚Äì –ø–æ—á–Ω–µ–º–æ –ø—Ä–æ—Å—Ç–æ –∑–∞—Ä–∞–∑!',
                                        reply_markup=sm.main_regicter_inline_markup)


class RegisterState(StatesGroup):
    waiting_for_email = State()


EMAIL_REGEX = r"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"


@dp.callback_query(F.data == 'accept')
async def accept(callback: CallbackQuery, state: FSMContext):
    await state.set_state(RegisterState.waiting_for_email)
    await callback.answer()
    existing_user = await AsyncDB.get_user_by_telegram_id(callback.from_user.id)
    if existing_user:
        await callback.message.answer('‚úÖ –í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ! –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ...',
                                      reply_markup=sm.accept_inline_markup)
    else:
        await callback.message.answer('üéâ –¢–∏ –º–∞–π–∂–µ –≥–æ—Ç–æ–≤–∏–π —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –Ω–∞–≤—á–∞–Ω–Ω—è! –©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø, –Ω–∞–º –ø–æ—Ç—Ä—ñ–±–µ–Ω —Ç–≤—ñ–π e-mail ‚Äì Telegram –¥–æ–∑–≤–æ–ª—è—î –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ –ª–∏—à–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–º —É —Å–∏—Å—Ç–µ–º—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º.\n'
                                      '\n<b>–©–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑—Ä–æ–±–∏—Ç–∏?</b>\n'
                                      '\n‚úâÔ∏è <b>–í–≤–µ–¥–∏ —Å–≤—ñ–π e-mail</b> —É –ø–æ–ª–µ –Ω–∏–∂—á–µ.\n'
                                      'üîê <b>–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Å—è, —â–æ –≤—ñ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π</b>, —â–æ–± –Ω–µ –≤—Ç—Ä–∞—Ç–∏—Ç–∏ –¥–æ—Å—Ç—É–ø.\n'
                                      '‚úÖ<b>–î–∞–ª—ñ ‚Äì –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏</b>, –ø—ñ—Å–ª—è —á–æ–≥–æ –∑–º–æ–∂–µ—à –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –æ–ø–ª–∞—Ç–∏.\n'
                                      '\nüöÄ–í—Å–µ –≥–æ—Ç–æ–≤–æ? –¢–æ–¥—ñ –≤–ø–µ—Ä–µ–¥!')


@dp.message(RegisterState.waiting_for_email)
async def process_email(message: Message, state: FSMContext):
    email = message.text.strip()
    if not re.match(EMAIL_REGEX, email):
        await message.answer('‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π email. –í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É –∞–¥—Ä–µ—Å—É, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: example@gmail.com')
        return

    await state.update_data(email=email)
    user_data = await state.get_data()
    await AsyncDB.create_user(
        telegram_id=message.chat.id,
        name=message.from_user.full_name,
        email=user_data["email"],
        username=message.from_user.username
    )
    await AsyncDB.create_user_progress(telegram_id=message.chat.id)
    await bot.send_message(
        message.chat.id,
        "üéØ –¢–∏ –º–∞–π–∂–µ –Ω–∞ —Å—Ç–∞—Ä—Ç—ñ! –ó–∞–ª–∏—à–∏–≤—Å—è –≤–∞–∂–ª–∏–≤–∏–π –∫—Ä–æ–∫ ‚Äì –∑–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É. –¶–µ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∞ —É–º–æ–≤–∞ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —Ç–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ –∫—É—Ä—Å—É.\n"
        "\n–ê–Ω–∫–µ—Ç–∞ –¥–æ–ø–æ–º–æ–∂–µ –Ω–∞–º –∫—Ä–∞—â–µ –∑—Ä–æ–∑—É–º—ñ—Ç–∏ —Ç–≤–æ—ó –ø–æ—Ç—Ä–µ–±–∏ —Ç–∞ –∑—Ä–æ–±–∏—Ç–∏ –Ω–∞–≤—á–∞–Ω–Ω—è –±—ñ–ª—å—à —Ü—ñ–Ω–Ω–∏–º –¥–ª—è —Ç–µ–±–µ. –ê –¥–ª—è —Ç–µ–±–µ ‚Äì —Ü–µ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å —É—Å–≤—ñ–¥–æ–º–∏—Ç–∏ —Å–≤–æ—ó —Ü—ñ–ª—ñ —Ç–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫–æ—Ä–∏—Å—Ç—å\n"
        "\n<b>–ß–æ–º—É —Ü–µ –≤–∞–∂–ª–∏–≤–æ?</b>\n"
        "\nüìù –ß—ñ—Ç–∫—ñ—à–µ –≤–∏–∑–Ω–∞—á–∏—à —Å–≤–æ—ó –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤—ñ–¥ –∫—É—Ä—Å—É.\n"
        "üìä –ú–∏ –∞–¥–∞–ø—Ç—É—î–º–æ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ –ø—ñ–¥ –ø–æ—Ç—Ä–µ–±–∏ —É—á–∞—Å–Ω–∏–∫—ñ–≤.\n"
        "ü§ù –°—Ç–∞–Ω–µ—à —á–∞—Å—Ç–∏–Ω–æ—é —Å–ø—ñ–ª—å–Ω–æ—Ç–∏ –æ–¥–Ω–æ–¥—É–º—Ü—ñ–≤.\n"
        "\n<b>–©–æ —Ä–æ–±–∏—Ç–∏?</b>\n"
        "\n1Ô∏è‚É£ <b>–ó–∞–ø–æ–≤–Ω–∏ –∞–Ω–∫–µ—Ç—É</b> ‚Äì –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ.\n"
        "2Ô∏è‚É£ <b>–ü–æ–≤–µ—Ä–Ω–∏—Å—è —Ç–∞ –Ω–∞—Ç–∏—Å–Ω–∏ '–Ø –∑–∞–ø–æ–≤–Ω–∏–≤/–ª–∞ –∞–Ω–∫–µ—Ç—É'</b>, —â–æ–± –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –æ–ø–ª–∞—Ç–∏.\n"
        "\nüöÄ –¢–∏ –≥–æ—Ç–æ–≤–∏–π? –¢–æ–¥—ñ –≤–ø–µ—Ä–µ–¥!\n",
        reply_markup=sm.form_inline_markup)
    await state.clear()


@dp.callback_query(F.data == 'go_back_accept')
async def register(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer('‚úÖ –í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ! –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ...',
                                  reply_markup=sm.register_inline_markup)


@dp.callback_query(F.data == 'form')
async def form(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer("üéØ –¢–∏ –º–∞–π–∂–µ –Ω–∞ —Å—Ç–∞—Ä—Ç—ñ! –ó–∞–ª–∏—à–∏–≤—Å—è –≤–∞–∂–ª–∏–≤–∏–π –∫—Ä–æ–∫ ‚Äì –∑–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É. –¶–µ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∞ —É–º–æ–≤–∞ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —Ç–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ –∫—É—Ä—Å—É.\n"
                                  "\n–ê–Ω–∫–µ—Ç–∞ –¥–æ–ø–æ–º–æ–∂–µ –Ω–∞–º –∫—Ä–∞—â–µ –∑—Ä–æ–∑—É–º—ñ—Ç–∏ —Ç–≤–æ—ó –ø–æ—Ç—Ä–µ–±–∏ —Ç–∞ –∑—Ä–æ–±–∏—Ç–∏ –Ω–∞–≤—á–∞–Ω–Ω—è –±—ñ–ª—å—à —Ü—ñ–Ω–Ω–∏–º –¥–ª—è —Ç–µ–±–µ. –ê –¥–ª—è —Ç–µ–±–µ ‚Äì —Ü–µ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å —É—Å–≤—ñ–¥–æ–º–∏—Ç–∏ —Å–≤–æ—ó —Ü—ñ–ª—ñ —Ç–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫–æ—Ä–∏—Å—Ç—å\n"
                                  "\n<b>–ß–æ–º—É —Ü–µ –≤–∞–∂–ª–∏–≤–æ?</b>\n"
                                  "\nüìù –ß—ñ—Ç–∫—ñ—à–µ –≤–∏–∑–Ω–∞—á–∏—à —Å–≤–æ—ó –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤—ñ–¥ –∫—É—Ä—Å—É.\n"
                                  "üìä –ú–∏ –∞–¥–∞–ø—Ç—É—î–º–æ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ –ø—ñ–¥ –ø–æ—Ç—Ä–µ–±–∏ —É—á–∞—Å–Ω–∏–∫—ñ–≤.\n"
                                  "ü§ù –°—Ç–∞–Ω–µ—à —á–∞—Å—Ç–∏–Ω–æ—é —Å–ø—ñ–ª—å–Ω–æ—Ç–∏ –æ–¥–Ω–æ–¥—É–º—Ü—ñ–≤.\n"
                                  "\n<b>–©–æ —Ä–æ–±–∏—Ç–∏?</b>\n"
                                  "\n1Ô∏è‚É£ <b>–ó–∞–ø–æ–≤–Ω–∏ –∞–Ω–∫–µ—Ç—É</b> ‚Äì –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ.\n"
                                  "2Ô∏è‚É£ <b>–ü–æ–≤–µ—Ä–Ω–∏—Å—è —Ç–∞ –Ω–∞—Ç–∏—Å–Ω–∏ '–Ø –∑–∞–ø–æ–≤–Ω–∏–≤/–ª–∞ –∞–Ω–∫–µ—Ç—É'</b>, —â–æ–± –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –æ–ø–ª–∞—Ç–∏.\n"
                                  "\nüöÄ –¢–∏ –≥–æ—Ç–æ–≤–∏–π? –¢–æ–¥—ñ –≤–ø–µ—Ä–µ–¥!\n",
                                  reply_markup=sm.form_inline_markup)


@dp.callback_query(F.data == 'go_back_form')
async def go_back_form(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer("üéØ –¢–∏ –º–∞–π–∂–µ –Ω–∞ —Å—Ç–∞—Ä—Ç—ñ! –ó–∞–ª–∏—à–∏–≤—Å—è –≤–∞–∂–ª–∏–≤–∏–π –∫—Ä–æ–∫ ‚Äì –∑–∞–ø–æ–≤–Ω–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É. –¶–µ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∞ —É–º–æ–≤–∞ –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó —Ç–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ –∫—É—Ä—Å—É.\n"
                                  "\n–ê–Ω–∫–µ—Ç–∞ –¥–æ–ø–æ–º–æ–∂–µ –Ω–∞–º –∫—Ä–∞—â–µ –∑—Ä–æ–∑—É–º—ñ—Ç–∏ —Ç–≤–æ—ó –ø–æ—Ç—Ä–µ–±–∏ —Ç–∞ –∑—Ä–æ–±–∏—Ç–∏ –Ω–∞–≤—á–∞–Ω–Ω—è –±—ñ–ª—å—à —Ü—ñ–Ω–Ω–∏–º –¥–ª—è —Ç–µ–±–µ. –ê –¥–ª—è —Ç–µ–±–µ ‚Äì —Ü–µ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å —É—Å–≤—ñ–¥–æ–º–∏—Ç–∏ —Å–≤–æ—ó —Ü—ñ–ª—ñ —Ç–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –∫–æ—Ä–∏—Å—Ç—å\n"
                                  "\n<b>–ß–æ–º—É —Ü–µ –≤–∞–∂–ª–∏–≤–æ?</b>\n"
                                  "\nüìù –ß—ñ—Ç–∫—ñ—à–µ –≤–∏–∑–Ω–∞—á–∏—à —Å–≤–æ—ó –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤—ñ–¥ –∫—É—Ä—Å—É.\n"
                                  "üìä –ú–∏ –∞–¥–∞–ø—Ç—É—î–º–æ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ –ø—ñ–¥ –ø–æ—Ç—Ä–µ–±–∏ —É—á–∞—Å–Ω–∏–∫—ñ–≤.\n"
                                  "ü§ù –°—Ç–∞–Ω–µ—à —á–∞—Å—Ç–∏–Ω–æ—é —Å–ø—ñ–ª—å–Ω–æ—Ç–∏ –æ–¥–Ω–æ–¥—É–º—Ü—ñ–≤.\n"
                                  "\n<b>–©–æ —Ä–æ–±–∏—Ç–∏?</b>\n"
                                  "\n1Ô∏è‚É£ <b>–ó–∞–ø–æ–≤–Ω–∏ –∞–Ω–∫–µ—Ç—É</b> ‚Äì –Ω–∞—Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ.\n"
                                  "2Ô∏è‚É£ <b>–ü–æ–≤–µ—Ä–Ω–∏—Å—è —Ç–∞ –Ω–∞—Ç–∏—Å–Ω–∏ '–Ø –∑–∞–ø–æ–≤–Ω–∏–≤/–ª–∞ –∞–Ω–∫–µ—Ç—É'</b>, —â–æ–± –ø–µ—Ä–µ–π—Ç–∏ –¥–æ –æ–ø–ª–∞—Ç–∏.\n"
                                  "\nüöÄ –¢–∏ –≥–æ—Ç–æ–≤–∏–π? –¢–æ–¥—ñ –≤–ø–µ—Ä–µ–¥!\n",
                                  reply_markup=sm.accept_inline_markup)


@dp.callback_query(F.data == 'to_pay')
async def front_of_menu(callback: CallbackQuery):

    # –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
    video_id = 'BAACAgIAAxkBAAPFZ8Bu8ajHtoaignWxQ97udddTYCwAAq5hAAJXDAhKFdXY_cFCbyE2BA'
    await callback.answer()
    await callback.message.answer_video(video_id,
                                        reply_markup=sm.menu_buttons_keyboard)


@dp.callback_query(F.data == 'check_registration_form')
async def check_registration_form(callback: CallbackQuery):
    tel_id = callback.message.chat.id
    user = await AsyncDB.get_user(tel_id)
    await bot.delete_message(tel_id, callback.message.message_id)
    if user:
        if user.phone and user.region and user.denomination and user.role:
            if len(user.phone) != 0 and len(user.region) != 0 and len(user.denomination) != 0 and len(user.role) != 0:
                payment_number = await AsyncDB.get_user_payments(tel_id)
                wfp = WayForPay(key=W4P_KEY, domain_name=DOMAIN_NAME)
                res = wfp.create_invoice(
                    merchantAccount=MERCHANT_ACCOUNT,
                    merchantAuthType='SimpleSignature',
                    amount='500',
                    currency='UAH',
                    productNames=["–û–ø–ª–∞—Ç–∞ –∑–∞ –∫—É—Ä—Å M4"],
                    productPrices=[500],
                    productCounts=[1],
                    orderID=f"M4-{tel_id}-{0 if payment_number is None else payment_number + 1}"
                )
                link = res.invoiceUrl
                if link is not None:
                    await bot.send_message(tel_id, pay_text, reply_markup=sm.pay_keyb(link))
                    return

    await bot.send_message(tel_id, not_registered_yet, reply_markup=sm.form_inline_markup)


@dp.message(F.text == "–ö–æ—Ä–∏—Å–Ω–µ")
async def people(message: Message):
    inline_button = [
        [
            InlineKeyboardButton(text=f"Choko M4Ukraine", url="https://choko.link/M4Ukraine")
        ]
    ]
    inline_keyboard = InlineKeyboardMarkup(inline_keyboard=inline_button)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    await message.answer("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å, —â–æ–± –ø–µ—Ä–µ–π—Ç–∏ –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º:",
                         reply_markup=inline_keyboard)


@dp.message(F.text == "–ü—ñ–¥—Ç—Ä–∏–º–∫–∞")
async def people(message: Message):
    inline_button = [
        [
            InlineKeyboardButton(text=f"–ü—ñ–¥—Ç—Ä–∏–º–∫–∞", url="https://t.me/m4_intensive")
        ]
    ]
    inline_keyboard = InlineKeyboardMarkup(inline_keyboard=inline_button)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    await message.answer("–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –¥–ª—è —Ç–µ–±–µ –≤ –±—É–¥—å-—è–∫–∏–π —á–∞—Å:",
                         reply_markup=inline_keyboard)


@dp.message(F.text == "–ü—É–±–ª—ñ—á–Ω–∏–π –¥–æ–≥–æ–≤—ñ—Ä")
async def people(message: Message):
    inline_button = [
        [
            InlineKeyboardButton(text=f"–¢–µ–ª–µ–≥—Ä–∞—Ñ", url="https://telegra.ph/Publ%D1%96chna-oferta-na-koristuvannya-poslugami-chat-bota-z-navchalnimi-kursami-02-27")
        ]
    ]
    inline_keyboard = InlineKeyboardMarkup(inline_keyboard=inline_button)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
    await message.answer("–ü–µ—Ä–µ—Ö—ñ–¥ –Ω–∞ —Å—Ç–∞—Ç—Ç—é —É —Ç–µ–ª–µ–≥—Ä–∞—Ñ –∑ –¥–æ–≥–æ–≤–æ—Ä–æ–º",
                         reply_markup=inline_keyboard)


@dp.message(F.text == "–ù–∞–≤—á–∞–Ω–Ω—è üìö")
async def study(message: Message):
    user = await AsyncDB.get_user(message.chat.id)

    if not user:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return
    keyboard = sm.get_module_keyboard(getattr(user, "current_module", 1) or 1)
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –º–æ–¥—É–ª—å:", reply_markup=keyboard)


@dp.message(F.text == '–Ø–∫ –Ω–∞–≤—á–∞—Ç–∏—Å—è?')
async def study_how(message: Message):

    await message.answer(how_learn,
                         reply_markup=sm.module_back_buttons_keyboard)


@dp.message(lambda message: message.text.startswith('–ú–æ–¥—É–ª—å'))
async def handle_module(message: Message):
    module_number = int(message.text.split(" ")[1])  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –º–æ–¥—É–ª—è
    tel_id = message.chat.id

    await AsyncDB.update_user_progress_module(tel_id, module_number)

    current_module = await AsyncDB.get_user_progress_current_module(tel_id)
    current_lesson = await AsyncDB.get_user_progress_current_lesson(tel_id)
    if current_module == module_number:
        lesson_data = await get_lesson_data_json(current_module, current_lesson)
        video_data = lesson_data["video_module"]
        # –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥–µ–æ –ø–æ —Ç–µ–∫—É—â–µ–º—É –∏–Ω–¥–µ–∫—Å—É
        video_to_send = video_data[0]
        await message.answer(f"{video_to_send['title1']}")

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î –ø–æ telegram_id
    user = await AsyncDB.get_user_by_telegram_id(message.chat.id)

    if user:
        user = await AsyncDB.get_user(message.chat.id)

        if not user:
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
            return

        keyboard = get_lesson_keyboard(getattr(user, "current_lesson", 1))
        await AsyncDB.check_module_score(tel_id, module_number)
        await message.answer("–û–±–µ—Ä—ñ—Ç—å —É—Ä–æ–∫:", reply_markup=keyboard)
    else:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–£—Ä–æ–∫"
@dp.message(lambda message: message.text.startswith('–£—Ä–æ–∫'))
async def handle_lesson(message: Message):
    lesson_number = int(message.text.split(" ")[1])  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞
    tel_id = message.chat.id
    module_number = await AsyncDB.get_user_progress_current_module(tel_id)
    current_module = await AsyncDB.get_user_current_module(tel_id)
    current_lesson = await AsyncDB.get_current_lesson(tel_id)  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await update_current_video_index_0(module_number, lesson_number)
    await update_current_test_index_0(module_number, lesson_number)
    current_video_index = await get_current_video_index(module_number, lesson_number)  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –≤–∏–¥–µ–æ
    curent_test_index = await get_current_test_index(module_number, lesson_number)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è –ø–µ—Ä–µ–π—Ç–∏ –∫ —É—Ä–æ–∫—É, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–º—É —É—Ä–æ–∫—É
    if module_number == current_module and lesson_number == current_lesson:
        await AsyncDB.update_user_progress_lesson(tel_id, lesson_number)

        lesson_data = await get_lesson_data_json(module_number, lesson_number)

        if lesson_data:
            if "video" in lesson_data and len(lesson_data["video"]) > 0:
                video_data = lesson_data["video"]
                # –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥–µ–æ –ø–æ —Ç–µ–∫—É—â–µ–º—É –∏–Ω–¥–µ–∫—Å—É
                video_to_send = video_data[current_video_index]
                first_video_id = video_to_send.get("video_id")
                if first_video_id:
                    # –°–æ–∑–¥–∞—ë–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Ç–µ—Å—Ç
                    test_data = lesson_data.get("tests", [])
                    if test_data:
                        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Å—Å—ã–ª–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
                        test_url = test_data[current_video_index]["url"]
                        test_title = test_data[curent_test_index]["test_id"]
                        inline_button = InlineKeyboardButton(text=f"{test_title}",
                                                             url=test_url)
                        inline_button2 = InlineKeyboardButton(text=f"–î–∞–ª—ñ ‚û°Ô∏è",
                                                              callback_data="next_lesson_part")
                        inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[[inline_button], [inline_button2]])

                        # –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–ª–∞–π-–∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
                        # next_button = KeyboardButton(text="–î–∞–ª—ñ")
                        # lesson_keyboard_reply = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[[next_button]])

                        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –≤–∏–¥–µ–æ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–∑–∞
                        next_video_index = current_video_index + 1
                        await update_current_video_index(module_number, lesson_number, next_video_index)
                        await update_current_test_index(module_number, lesson_number, next_video_index)

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Å –∫–Ω–æ–ø–∫–æ–π
                        await message.answer_video(
                            video=first_video_id,
                            caption=f'{lesson_data.get("title")}\n \n {video_to_send["title"]}',
                            reply_markup=inline_keyboard
                        )
                        # await message.answer(f"{video_to_send['title']}",
                        #                      reply_markup=lesson_keyboard_reply)

                else:
                    await message.answer("ID –≤–∏–¥–µ–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö.")
            else:
                await message.answer("–í —É—Ä–æ–∫–µ –Ω–µ—Ç –≤–∏–¥–µ–æ.")
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ–± —É—Ä–æ–∫–µ.")
    else:

        number = 0
        lesson_data = await get_lesson_data_json(module_number, lesson_number)
        await message.answer(f'{lesson_data.get("title")}')

        while number < len(lesson_data['video']):
            video_data = lesson_data["video"]
            # –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥–µ–æ –ø–æ —Ç–µ–∫—É—â–µ–º—É –∏–Ω–¥–µ–∫—Å—É
            video_to_send = video_data[number]
            video_id = video_to_send.get("video_id")

            await message.answer_video(video_id,
                                       caption=f"{video_to_send['title']}")
            number += 1
        else:
            await message.answer("–û—Å—å —É—Å—ñ –≤—ñ–¥–µ–æ –∑ —Ü—å–æ–≥–æ —É—Ä–æ–∫—É.",
                                 reply_markup=sm.lesson_back_buttons_keyboard)


@dp.callback_query(F.data == 'next_lesson_part')
async def front_of_menu(callback: CallbackQuery):
    tel_id = callback.message.chat.id
    _up_ = await AsyncDB.get_user_progress(tel_id)
    up = dict(json.loads(_up_.progress))
    module_number = _up_.select_module
    lesson_number = _up_.select_lesson
    current_video_index = await get_current_video_index(module_number, lesson_number)
    curent_test_index = await get_current_test_index(module_number, lesson_number)
    test_result = up[f"module{module_number}"][f"lesson{lesson_number}"][str(current_video_index)]
    if test_result is not None:
        if int(test_result) < 80:
            lesson_data = await get_lesson_data_json(module_number, lesson_number)
            test_data = lesson_data.get("tests", [])
            test_url = test_data[current_video_index]["url"]
            test_title = test_data[curent_test_index]["test_id"]
            inline_button = InlineKeyboardButton(text=f"{test_title}",
                                                 url=test_url)
            inline_button2 = InlineKeyboardButton(text=f"–î–∞–ª—ñ ‚û°Ô∏è",
                                                  callback_data="next_lesson_part")
            inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[[inline_button], [inline_button2]])
            await bot.send_message(tel_id, failed_test, reply_markup=inline_keyboard)
        else:
            await handle_next_button(callback.message)  # –ø–µ—Ä–µ—Ö–æ–¥ –¥–∞–ª—å—à–µ
    else:
        await bot.send_message(tel_id, test_not_passed)
        return


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î–∞–ª—ñ"
async def handle_next_button(message: Message):
    tel_id = message.chat.id
    module_number = await AsyncDB.get_user_progress_current_module(tel_id)
    lesson_number = await AsyncDB.get_user_progress_current_lesson(tel_id)
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞ –∏–∑ JSON
    lesson_data = await get_lesson_data_json(module_number, lesson_number)
    print(lesson_data)
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –≤–∏–¥–µ–æ
    current_video_index = await get_current_video_index(module_number, lesson_number)
    curent_test_index = await get_current_test_index(module_number, lesson_number)

    if lesson_data:
        print(current_video_index, len(lesson_data['video']))
        if current_video_index < len(lesson_data['video']):
            video_data = lesson_data["video"]
            # –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥–µ–æ –ø–æ —Ç–µ–∫—É—â–µ–º—É –∏–Ω–¥–µ–∫—Å—É
            video_to_send = video_data[current_video_index]
            first_video_id = video_to_send.get("video_id")
            if first_video_id:
                # –°–æ–∑–¥–∞—ë–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É —Å —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Ç–µ—Å—Ç
                test_data = lesson_data.get("tests", [])
                if test_data:
                    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é —Å—Å—ã–ª–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
                    test_url = test_data[current_video_index]["url"]
                    test_title = test_data[curent_test_index]["test_id"]
                    inline_button = InlineKeyboardButton(text=f"{test_title}",
                                                         url=test_url)
                    inline_button2 = InlineKeyboardButton(text=f"–î–∞–ª—ñ ‚û°Ô∏è",
                                                          callback_data="next_lesson_part")
                    inline_keyboard = InlineKeyboardMarkup(inline_keyboard=[[inline_button], [inline_button2]])

                    # –°–æ–∑–¥–∞–µ–º —Ä–µ–ø–ª–∞–π-–∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
                    # next_button = KeyboardButton(text="–î–∞–ª—ñ")
                    # lesson_keyboard_reply = ReplyKeyboardMarkup(resize_keyboard=True, keyboard=[[next_button]])

                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –≤–∏–¥–µ–æ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–∑–∞
                    next_video_index = current_video_index + 1
                    await update_current_video_index(module_number, lesson_number, next_video_index)
                    await update_current_test_index(module_number, lesson_number, next_video_index)

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Å –∫–Ω–æ–ø–∫–æ–π
                    await message.answer_video(
                        video=first_video_id,
                        caption=f"{video_to_send['title']}",
                        reply_markup=inline_keyboard
                    )
                    # await message.answer(f"{video_to_send['title']}",
                    #                      reply_markup=lesson_keyboard_reply)
            else:
                await message.answer("–í–∏ –º–æ–ª–æ–¥—Ü—ñ –ø—Ä–∏—Å—Ç—É–ø–∞–π—Ç–µ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —É—Ä–æ–∫—É",
                                     reply_markup=sm.get_next_lesson_keyboard())
        else:
            current_module = await AsyncDB.get_user_current_module(tel_id)
            current_lesson = await AsyncDB.get_current_lesson(tel_id)
            if current_lesson == 6:
                lesson_data = await get_lesson_data_json(current_module, current_lesson)
                video_data = lesson_data["video_module"]
                # –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥–µ–æ –ø–æ —Ç–µ–∫—É—â–µ–º—É –∏–Ω–¥–µ–∫—Å—É
                video_to_send = video_data[0]
                video_id = video_to_send.get("video_id")
                await message.answer_video(video_id,
                                           caption=f"{video_to_send['title2']}",
                                           reply_markup=sm.next_module_markup)
            else:
                await message.answer("–í–∏ –º–æ–ª–æ–¥—Ü—ñ –ø—Ä–∏—Å—Ç—É–ø–∞–π—Ç–µ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —É—Ä–æ–∫—É",
                                     reply_markup=sm.get_next_lesson_keyboard())
    else:
        current_module = await AsyncDB.get_user_current_module(tel_id)
        current_lesson = await AsyncDB.get_current_lesson(tel_id)
        if current_lesson == 6:
            lesson_data = await get_lesson_data_json(current_module, current_lesson)
            video_data = lesson_data["video_module"]
            # –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥–µ–æ –ø–æ —Ç–µ–∫—É—â–µ–º—É –∏–Ω–¥–µ–∫—Å—É
            video_to_send = video_data[0]
            video_id = video_to_send.get("video_id")
            await message.answer_video(video_id,
                                       caption=f"{video_to_send['title2']}",
                                       reply_markup=sm.next_module_markup)


@dp.message(lambda message: message.text == "–ù–∞—Å—Ç—É–ø–Ω–∏–π —É—Ä–æ–∫")
async def handle_next_lesson(message: Message):
    tel_id = message.chat.id
    current_lesson = await AsyncDB.get_current_lesson(tel_id)
    next_lesson = current_lesson + 1

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —É—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –æ–Ω —É–∂–µ –ø—Ä–æ—à–µ–ª
    if current_lesson is not None and current_lesson <= 6:  # –ù–∞–ø—Ä–∏–º–µ—Ä, —É –Ω–∞—Å 6 —É—Ä–æ–∫–æ–≤
        await AsyncDB.update_current_lesson(tel_id, next_lesson)
        await message.answer(f"–í–∏ –ø–µ—Ä–µ–π—à–ª–∏ –Ω–∞ {next_lesson}-–π —É—Ä–æ–∫. –£—Å–ø—ñ—Ö—ñ–≤ —É –Ω–∞–≤—á–∞–Ω–Ω—ñ!")

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª–µ–¥—É—é—â–∏—Ö —É—Ä–æ–∫–æ–≤
        user = await AsyncDB.get_user_by_telegram_id(tel_id)
        if user:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–≤—ã–º —É—Ä–æ–∫–æ–º
            keyboard = get_lesson_keyboard(next_lesson)
            await message.answer("–û–±–µ—Ä—ñ—Ç—å —É—Ä–æ–∫:", reply_markup=keyboard)
        else:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
    else:
        await message.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—Å–µ —É—Ä–æ–∫–∏ —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è!")


@dp.message(F.text == "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ —É—Ä–æ–∫—ñ–≤")
async def back_to_lessons(message: Message):
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î –ø–æ telegram_id
    user = await AsyncDB.get_user_by_telegram_id(message.chat.id)

    if user:
        user = await AsyncDB.get_user(message.chat.id)

        if not user:
            await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
            return

        keyboard = get_lesson_keyboard(getattr(user, "current_lesson", 1))
        await message.answer("–û–±–µ—Ä—ñ—Ç—å —É—Ä–æ–∫:", reply_markup=keyboard)
    else:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")


@dp.message(F.text == "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
async def back_to_lessons(message: Message):
    await message.answer("–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.",
                         reply_markup=sm.menu_buttons_keyboard)


@dp.message(F.text == "üîô–ú–æ–¥—É–ª—ñ")
async def back_to_lessons(message: Message):
    user = await AsyncDB.get_user(message.chat.id)
    keyboard = sm.get_module_keyboard(getattr(user, "current_module", 1))
    await message.answer("–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –º–æ–¥—É–ª—ñ–≤:", reply_markup=keyboard)


@dp.message(F.text == "–ù–∞—Å—Ç—É–ø–Ω–∏–π –º–æ–¥—É–ª—å")
async def next_module(message: Message):

    user = await AsyncDB.get_user(message.chat.id)
    module_start_date = await AsyncDB.get_module_start_date(message.chat.id)

    if not user:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    if module_start_date:
        module_start_date = module_start_date.date() if isinstance(module_start_date, datetime) else module_start_date
        days_passed = (datetime.now().date() - module_start_date).days
        days_left = 15 - days_passed

        if days_passed < 15:
            keyboard = get_lesson_keyboard(getattr(user, "current_lesson", 1))
            await message.answer(f"–ù–∞—Å—Ç—É–ø–Ω–∏–π –º–æ–¥—É–ª—å –±—É–¥–µ –≤—ñ–¥–∫—Ä–∏—Ç–æ —á–µ—Ä–µ–∑ {days_left} –¥–Ω—ñ–≤.",
                                 reply_markup=keyboard)
            return

        await check_modules()

    if user.current_module >= 6:
        await message.answer("–í–∏ –≤–∂–µ –ø—Ä–æ–π—à–ª–∏ –≤—Å—ñ –º–æ–¥—É–ª—ñ.")
        return


async def check_modules():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ 15 –¥–Ω–µ–π."""
    users = await AsyncDB.get_all_users()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

    updated_users = []  # –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –æ–±–Ω–æ–≤–∏–º –º–æ–¥—É–ª—å

    for user in users:
        module_start_date = user.get("module_start_date")
        current_module = user.get("current_module", 1)  # –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ 1

        if not module_start_date:
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –¥–∞—Ç—ã —Å—Ç–∞—Ä—Ç–∞

        module_start_date = module_start_date.date() if isinstance(module_start_date, datetime) else module_start_date
        days_passed = (datetime.now().date() - module_start_date).days

        if days_passed >= 15:
            new_module = current_module + 1
            await AsyncDB.update_current_module(user["tel_id"], new_module)


async def scheduler():
    while True:
        await check_modules()
#         await block_inactive_users()
#
#         await asyncio.sleep(86400)


async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
try:
    asyncio.run(main())
    asyncio.run(scheduler())
except KeyboardInterrupt:
    print('Exit')
